<?phpabstract class DB_Table{  protected $table_name;  protected  $ignore_fields=array();  public $errors_while_updating=array();  public $updated_fields=array();    // Array: data  // Class data  public $data=array();  // Integer: id  // Database Primary Key  public  $id=0; // Boolean: warning  // True if a warning  public $warning=false;  // Boolean: error  // True if error occuers  public $error=false;  // String: msg  // Messages  public $msg='';  // Boolean: new  // True if company has been created  public $new=false; // Boolean: updated  // True if company has been updated  public $updated=false;  public $error_updated=false;  public $msg_updated=''; // Boolean: found  // True if company founded  public $found=false; public $found_key=false; public $no_history=false;  // Array: candidate  // array with the posible matches  public $candidate=array(); public $updated_field=array();  public $editor=array( 		       'Author Name'=>false, 		       'Author Key'=>0, 		       'User Key'=>0, 		       'Date'=>false  		       );  /*    Function: base_data    Initialize data  array with the default field values   */  function base_data(){        $data=array();    $result = mysql_query("SHOW COLUMNS FROM `".$this->table_name." Dimension`");    //  print "SHOW COLUMNS FROM `".$this->table_name." Dimension`\n\n\n\n\n";    if (!$result) {      echo 'Could not run query: ' . mysql_error();     exit;    }    if (mysql_num_rows($result) > 0) {     while ($row = mysql_fetch_assoc($result)) {       if(!in_array($row['Field'],$this->ignore_fields))	 $data[$row['Field']]=$row['Default'];     }   }    return $data;  }  /*Method: update    Switcher calling the apropiate update method    Parameters:    $data - associated array with Email Dimension fields    */public function update($data,$options='') {if(!is_array($data)){$this->error=true;return;}  if (isset($data['editor'])) {    foreach($data['editor'] as $key=>$value) {            if (array_key_exists($key,$this->editor))                $this->editor[$key]=$value;          }    }      foreach($data as $key=>$value) {    $this->update_field_switcher($key,$value,$options);           }      if (!$this->updated)    $this->msg.=' '._('Nothing to be updated')."\n";}  /*Function: update_field   */ protected function update_field_switcher($field,$value,$options=''){   $base_data=$this->base_data();      if (preg_match('/^Address.*Data$/',$field))     $this->update_field($field,$value,$options);   elseif(array_key_exists($field,$base_data)) {          if ($value!=$this->data[$field]) {              $this->update_field($field,$value,$options);     }   }             } protected function translate_data($data,$options=''){     //   print_r($data);      $_data=array();   foreach($data as $key => $value){          if(preg_match('/supplier/i',$options))       $regeprix='/^Supplier /i';     elseif(preg_match('/customer/i',$options))       $regex='/^Customer /i';     elseif(preg_match('/company/i',$options))       $regex='/^Company /i';     elseif(preg_match('/contact/i',$options))       $regex='/^Contact /i';          $rpl=$this->table_name.' ';     $_key=preg_replace($regex,$rpl,$key);     $_data[$_key]=$value;   }        return $_data; }protected function update_field($field,$value,$options=''){    if(is_array($value))    return;  $value=_trim($value);    //print "** Update Field $field $value\n";    $old_value=_('Unknown');    $key_field=$this->table_name." Key";  if($this->table_name=='Supplier Product')    $key_field='Supplier Product Current Key';    $sql="select `".$field."` as value from  `".$this->table_name." Dimension`  where `$key_field`=".$this->id;  //print "$sql\n";  $result=mysql_query($sql);  if($row=mysql_fetch_array($result, MYSQL_ASSOC)   ){    $old_value=$row['value'];  }     $sql="update `".$this->table_name." Dimension` set `".$field."`=".prepare_mysql($value)." where `$key_field`=".$this->id;//  print $sql;   mysql_query($sql);  $affected=mysql_affected_rows();  if($affected==-1){    $this->msg.=' '._('Record can not be updated')."\n";    $this->error_updated=true;    $this->error=true;       return;  }elseif($affected==0){    //$this->msg.=' '._('Same value as the old record');      }else{    $this->data[$field]=$value;    $this->msg.=" $field "._('Record updated').", \n";    $this->msg_updated.=" $field "._('Record updated').", \n";    $this->updated=true;    $this->new_value=$value;       $save_history=true;    if(preg_match('/no( |\_)history|nohistory/i',$options))      $save_history=false;    if(       preg_match('/customer|contact|company|order|staff|supplier|address|telecom|user|store|product|company area|company department|position/i',$this->table_name)       and !$this->new        and $save_history       ){      $history_data=array(			  'indirect_object'=>$field			  ,'old_value'=>$old_value			  ,'new_value'=>$value			  			  );      if($this->table_name=='Product Family')      	$history_data['direct_object']='Family';      if($this->table_name=='Product Department')      	$history_data['direct_object']='Department';      	      $this->add_history($history_data);          }  }}protected function get_editor_data(){    $subject='User';  $subject_key=$this->editor['User Key'];    if($this->editor['Author Name'])    $author=$this->editor['Author Name'];  else    $author=_('System');  $author_key=$this->editor['Author Key'];  if(isset($this->editor['Date']))    $date=$this->editor['Date'];  else    $date=date("Y-m-d H:i:s");  return array('subject'=>$subject,'subject_key'=>$subject_key,'date'=>$date,'author'=>$author,'author_key'=>$author_key);}protected function add_history($raw_data,$force=false){   if($this->no_history)    return;  if($this->new and !$force)    return;   if($this->table_name=='Product Department')    $table='Department';    elseif($this->table_name=='Product Family')    $table='Family';  else    $table=$this->table_name;  // print "editor\n";  // print_r($this->editor);    $data['subject']='user';  $data['subject_key']=$this->editor['User Key'];  $data['action']='edited';  $data['direct_object']=$table;  $data['direct_object_key']=$this->id;  $data['preposition']='to';  $data['indirect_object']='';  $data['indirect_object_key']=0;  $data['deep']=1; // print $this->editor['Date']."zzz";  if(isset($this->editor['Date'])  and preg_match('/^\d{4}-\d{2}-\d{2}/',$this->editor['Date']))    $data['date']=$this->editor['Date'];  else    $data['date']=date("Y-m-d H:i:s");  if($this->editor['Author Name'])    $data['author']=$this->editor['Author Name'];  else   $data['author']=_('System');  $data['author_key']=$this->editor['Author Key']; if(isset($raw_data['indirect_object']))   $data['note']=$raw_data['indirect_object'].' '._('changed'); else   $data['note']='Unknown'; $data['details']=$data['note'];  if(isset($data['action']) and $data['action']=='created'){    $data['preposition']='';  } //print_r($this->editor);  foreach($raw_data as $key=>$value){    $data[$key]=$value;  }    if(isset($raw_data['old_value']) and  isset($raw_data['new_value']) ){    $data['details']=$data['indirect_object'].' '._('changed from')." \"".$raw_data['old_value']."\" "._('to')." \"".$raw_data['new_value']."\"";  } elseif(  isset($raw_data['new_value']) ){    $data['details']=$data['indirect_object'].' '._('changed to')." \"".$raw_data['new_value']."\"";  }   // print_r($data); $sql=sprintf("insert into `History Dimension` (`History Date`,`Subject`,`Subject Key`,`Action`,`Direct Object`,`Direct Object Key`,`Preposition`,`Indirect Object`,`Indirect Object Key`,`History Abstract`,`History Details`,`Author Name`,`Author Key`,`Deep`) values (%s,%s,%d,%s,%s,%d,%s,%s,%d,%s,%s,%s,%d,%s)"	      ,prepare_mysql($data['date'])	      ,prepare_mysql($data['subject'])	      , $data['subject_key']	      ,prepare_mysql($data['action'])	      ,prepare_mysql($data['direct_object'])	      ,$data['direct_object_key']	      ,prepare_mysql($data['preposition'],false)	      ,prepare_mysql($data['indirect_object'],false)	      ,$data['indirect_object_key']	      ,prepare_mysql($data['note'])	      ,prepare_mysql($data['details'])	      ,prepare_mysql($data['author'])	      , $data['author_key']	      ,prepare_mysql($data['deep'])		  );   mysql_query($sql);   //  print $sql;   // exit;}function set_editor($raw_data){  if(isset($raw_data['editor'])){      foreach($raw_data['editor'] as $key=>$value){		if(array_key_exists($key,$this->editor))	  $this->editor[$key]=$value;	      }    }} function reread(){   $this->get_data('id',$this->id);  }}?>