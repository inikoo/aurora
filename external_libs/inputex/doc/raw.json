{"majorversion": 2, "classmap": {"inputEx.CheckBox": {"name": "inputEx.CheckBox", "constructors": [{"params": [{"type": "Object", "name": "options", "description": " Added options for CheckBoxes:\n<ul>\n<li>sentValues: 2D vector of values for checked/unchecked states (default is [true, false])</li>\n</ul>"}], "description": "Create a checkbox."}], "namespace": "", "module": "inputEx", "guessedname": "CheckBox", "methods": {"setValue": {"params": [{"type": "Any", "name": "value", "description": " The value schould be one of [checkedValue,uncheckedValue]"}, {"type": "boolean", "name": "[sendUpdatedEvt]", "description": " (optional) Wether this setValue should fire the updatedEvt or not (default is true, pass false to NOT send the event)"}], "description": "Set the value of the checkedbox", "guessedname": "setValue", "guessedtype": "function"}, "initEvents": {"description": "Clear the previous events and listen for the \"change\" event", "guessedname": "initEvents", "guessedtype": "function"}, "renderComponent": {"description": "Render the checkbox and the hidden field", "guessedname": "renderComponent", "guessedtype": "function"}, "getValue": {"return": {"type": "Any", "description": "one of [checkedValue,uncheckedValue]"}, "description": "Get the state value", "guessedname": "getValue", "guessedtype": "function"}, "setOptions": {"params": [{"type": "Object", "name": "options", "description": " Options object (inputEx inputParams) as passed to the constructor"}], "description": "Adds the CheckBox specific options", "guessedname": "setOptions", "guessedtype": "function"}, "disable": {"description": "Disable the field", "guessedname": "disable", "guessedtype": "function"}, "enable": {"description": "Enable the field", "guessedname": "enable", "guessedtype": "function"}, "onChange": {"params": [{"type": "Event", "name": "e", "description": " The original 'change' event"}], "description": "Function called when the checkbox is toggled", "guessedname": "onChange", "guessedtype": "function"}}, "extends": "inputEx.Field", "superclass": "inputEx.Field", "file": "CheckBox.js", "guessedtype": "function", "shortname": "inputEx.CheckBox", "description": "Create a checkbox."}, "inputEx.PairField": {"name": "inputEx.PairField", "deprecated": "Use the CombineField instead", "constructors": [{"params": [{"type": "Object", "name": "options", "description": " Added options:\n<ul>\n<li>leftFieldOptions: the left field type definition object (same as groups)</li>\n<li>rightFieldOptions: the right field type definition object (same as groups)</li>\n</ul>"}], "description": "A meta field to put 2 fields on the same line"}], "namespace": "", "module": "inputEx", "guessedname": "PairField", "extends": "inputEx.Field", "superclass": "inputEx.Field", "file": "PairField.js", "guessedtype": "function", "shortname": "inputEx.PairField", "description": "A meta field to put 2 fields on the same line"}, "inputEx.MenuField": {"name": "inputEx.MenuField", "constructors": [{"params": [{"type": "Object", "name": "options", "description": " Added options:\n<ul>\n<li>menuItems : contains descriptions of menu items</li>\n<li>menuTrigger : event to trigger menu show</li>\n<li>menuInvite : text to display when no selection made</li>\n<li>menuPosition : array of corners positions (syntax : ['menu popup corner','invite div corner'])</li>\n</ul>"}], "description": "Create a menu field"}], "namespace": "", "module": "inputEx", "guessedname": "MenuField", "methods": {"setOptions": {"params": [{"type": "Object", "name": "options", "description": " Options object (inputEx inputParams) as passed to the constructor"}], "description": "Set the default values of the options", "guessedname": "setOptions", "guessedtype": "function"}, "renderComponent": {"description": "Build a menu", "guessedname": "renderComponent", "guessedtype": "function"}}, "extends": "inputEx.Field", "superclass": "inputEx.Field", "file": "MenuField.js", "guessedtype": "function", "shortname": "inputEx.MenuField", "description": "Create a menu field"}, "inputEx.MapField": {"name": "inputEx.MapField", "constructors": [{"params": [{"type": "Object", "name": "options", "description": " Added options:\n<ul>\n<li>width</li>\n<li>height</li>\n<li>loading</li>\n<li>lat</li>\n<li>lon</li>\n<li>uzoom</li>\n<li>api: google, yahoo or virtualearth (default)</li>\n<li>api_key</li>\n</ul>"}], "description": "Wrapper for Mapping APIs, including Google Maps, Yahoo Maps and Virtual Earth"}], "namespace": "", "module": "inputEx", "guessedname": "MapField", "methods": {"preload": {"description": "This preloaded MAY not really work -- we recommend that you use\nthe following JavaScript instead _after_ \"yahoo-dom-event.js\" (or similar)\nis included:\n<script type=\"text/javascript\">\nYMAPPID = [yourapikey]\n</script>\n<script type=\"text/javascript\" src=\"http://us.js2.yimg.com/us.js.yimg.com/lib/map/js/api/ymapapi_3_8_0_7.js\">\n</script>\nNote the non-standard loading pattern! See:\nhttp://yuiblog.com/blog/2006/12/14/maps-plus-yui/", "guessedname": "preload", "guessedtype": "function"}, "wait_create": {"description": "This will wait until the DOM element appears before completion of map rendering", "guessedname": "wait_create", "guessedtype": "function"}, "setValue": {"description": "set the value: {lat: 45.23234, lon: 2.34456, uzoom: 6, nzoom: 6}", "guessedname": "setValue", "guessedtype": "function"}, "renderComponent": {"description": "Render the field using the appropriate mapping function", "guessedname": "renderComponent", "guessedtype": "function"}, "getValue": {"description": "return the same structure as setValue", "guessedname": "getValue", "guessedtype": "function"}, "setOptions": {"description": "Adds the 'inputEx-MapField' default className", "guessedname": "setOptions", "guessedtype": "function"}}, "extends": "inputEx.Field", "superclass": "inputEx.Field", "file": "MapField.js", "guessedtype": "function", "shortname": "inputEx.MapField", "description": "Wrapper for Mapping APIs, including Google Maps, Yahoo Maps and Virtual Earth"}, "inputEx.VectorField": {"name": "inputEx.VectorField", "constructors": [{"params": [{"type": "Object", "name": "options", "description": " inputEx.Field options object"}], "description": "A field limited to number inputs (floating)"}], "namespace": "", "module": "inputEx", "guessedname": "VectorField", "methods": {"setOptions": {"description": "Additional options for VectorField (dimension, size)", "guessedname": "setOptions", "guessedtype": "function"}, "formForMethod": {"params": [{"type": "function", "name": "method", "description": " A method created through YAHOO.rpc.Service"}], "description": "Return the inputEx form options from a method", "guessedname": "formForMethod", "guessedtype": "function"}, "generateServiceForm": {"params": [{"type": "function", "name": "method", "description": " A method created through YAHOO.rpc.Service"}, {"type": "Object", "name": "formOpts", "description": ""}], "description": "Build a form to run a service !\nbuilt for yui-rpc", "guessedname": "generateServiceForm", "guessedtype": "function"}}, "extends": "inputEx.Field", "superclass": "inputEx.Field", "file": "VectorField.js", "guessedtype": "function", "shortname": "inputEx.VectorField", "properties": {"RPC": {"static": "", "description": "inputEx RPC utility functions. To be used with YUI-RPC utility (provided in inputex/lib)", "guessedname": "RPC", "guessedtype": "property"}}, "description": "A field limited to number inputs (floating)"}, "inputEx.TimeIntervalField": {"name": "inputEx.TimeIntervalField", "constructors": [{"params": [{"type": "Object", "name": "options", "description": " Added options\n<ul>\n<li>dateFormat: same as DateField</li>\n</ul>"}], "description": "A field limited to number inputs (floating)"}], "namespace": "", "module": "inputEx", "guessedname": "TimeIntervalField", "methods": {"setValue": {"params": [{"type": "Date", "name": "val", "description": " Date to set"}, {"type": "boolean", "name": "[sendUpdatedEvt]", "description": " (optional) Wether this setValue should fire the updatedEvt or not (default is true, pass false to NOT send the event)"}], "description": "Set the value of both subfields", "guessedname": "setValue", "guessedtype": "function"}, "getValue": {"return": {"type": "Integer", "description": "the time interval"}, "description": "Concat the values to return a date", "guessedname": "getValue", "guessedtype": "function"}}, "extends": "inputEx.CombineField", "superclass": "inputEx.CombineField", "file": "TimeIntervalField.js", "guessedtype": "function", "shortname": "inputEx.TimeIntervalField", "description": "A field limited to number inputs (floating)"}, "inputEx.Textarea": {"name": "inputEx.Textarea", "constructors": [{"params": [{"type": "Object", "name": "options", "description": " Added options:\n<ul>\n<li>rows: rows attribute</li>\n<li>cols: cols attribute</li>\n</ul>"}], "description": "Create a textarea input"}], "namespace": "", "module": "inputEx", "guessedname": "Textarea", "methods": {"setOptions": {"params": [{"type": "Object", "name": "options", "description": " Options object (inputEx inputParams) as passed to the constructor"}], "description": "Set the specific options (rows and cols)", "guessedname": "setOptions", "guessedtype": "function"}, "getStateString": {"description": "Add the minLength string message handling", "guessedname": "getStateString", "guessedtype": "function"}, "renderComponent": {"description": "Render an 'INPUT' DOM node", "guessedname": "renderComponent", "guessedtype": "function"}, "validate": {"description": "Uses the optional regexp to validate the field value", "guessedname": "validate", "guessedtype": "function"}}, "extends": "inputEx.Field", "superclass": "inputEx.Field", "file": "Textarea.js", "guessedtype": "function", "shortname": "inputEx.Textarea", "description": "Create a textarea input"}, "inputEx.RadioField": {"name": "inputEx.RadioField", "constructors": [{"params": [{"type": "Object", "name": "options", "description": " inputEx.Field options object"}], "description": "Create a radio button. Here are the added options :\n<ul>\n<li>choices: list of choices (array of string)</li>\n<li>values: list of returned values (array )</li>\n<li>allowAny: add an option with a string field</li>\n</ul>"}], "namespace": "", "module": "inputEx", "guessedname": "RadioField", "methods": {"setValue": {"params": [{"type": "Any", "name": "value", "description": " The value schould be one of this.options.values (which defaults to this.options.choices if missing) if allowAny option not true."}, {"type": "boolean", "name": "[sendUpdatedEvt]", "description": " (optional) Wether this setValue should fire the updatedEvt or not (default is true, pass false to NOT send the event)"}], "description": "Set the value of the checkedbox", "guessedname": "setValue", "guessedtype": "function"}, "initEvents": {"description": "Listen for change events on all radios", "guessedname": "initEvents", "guessedtype": "function"}, "renderComponent": {"description": "Render the checkbox and the hidden field", "guessedname": "renderComponent", "guessedtype": "function"}, "getValue": {"return": {"type": "Any", "description": ""}, "description": "Get the field value", "guessedname": "getValue", "guessedtype": "function"}, "setOptions": {"params": [{"type": "Object", "name": "options", "description": " Options object (inputEx inputParams) as passed to the constructor"}], "description": "Adds the Radio button specific options", "guessedname": "setOptions", "guessedtype": "function"}, "onChange": {"params": [{"type": "Event", "name": "e", "description": " The original 'change' event"}], "description": "Function called when the checkbox is toggled", "guessedname": "onChange", "guessedtype": "function"}}, "extends": "inputEx.Field", "superclass": "inputEx.Field", "file": "RadioField.js", "guessedtype": "function", "shortname": "inputEx.RadioField", "description": "Create a radio button. Here are the added options :\n<ul>\n<li>choices: list of choices (array of string)</li>\n<li>values: list of returned values (array )</li>\n<li>allowAny: add an option with a string field</li>\n</ul>"}, "inputEx.FileField": {"name": "inputEx.FileField", "constructors": [{"params": [{"type": "Object", "name": "options", "description": " Added options:\n<ul>\n</ul>"}], "description": "Create a file input"}], "namespace": "", "module": "inputEx", "guessedname": "FileField", "methods": {"renderComponent": {"description": "Render an 'INPUT' DOM node", "guessedname": "renderComponent", "guessedtype": "function"}}, "extends": "inputEx.Field", "superclass": "inputEx.Field", "file": "FileField-beta.js", "guessedtype": "function", "shortname": "inputEx.FileField", "description": "Create a file input"}, "inputEx.DatePickerField": {"name": "inputEx.DatePickerField", "constructors": [{"params": [{"type": "Object", "name": "options", "description": " No added option for this field (same as DateField)\n<ul>\n<li>calendar: yui calendar configuration object</li>\n</ul>"}], "description": "A DatePicker Field."}], "namespace": "", "module": "inputEx", "guessedname": "DatePickerField", "methods": {"setOptions": {"params": [{"type": "Object", "name": "options", "description": " Options object (inputEx inputParams) as passed to the constructor"}], "description": "Set the default date picker CSS classes", "guessedname": "setOptions", "guessedtype": "function"}, "renderComponent": {"description": "Render the input field and the minical container", "guessedname": "renderComponent", "guessedtype": "function"}, "renderCalendar": {"description": "Called ONCE to render the calendar lazily", "guessedname": "renderCalendar", "guessedtype": "function"}}, "extends": "inputEx.DateField", "superclass": "inputEx.DateField", "file": "DatePickerField.js", "guessedtype": "function", "shortname": "inputEx.DatePickerField", "description": "A DatePicker Field."}, "inputEx.widget.DataTable": {"name": "inputEx.widget.DataTable", "constructors": [{"params": [{"type": "Object", "name": "options", "description": " Options:\n<ul>\n<li>id</li>\n<li>parentEl</li>\n<li>editing 'formeditor' (default) or 'celleditor'</li>\n<li>tableColumns: (optional) list of visible columns in the datatable</li>\n<li>sortable: (optional) are the columns sortable, default true</li>\n<li>resizeable: (optional) are the columns resizeable, default true</li>\n<li>allowInsert: default true</li>\n<li>allowModify: default true</li>\n<li>allowDelete: default true</li>\n</ul>"}], "description": "Create an editable datatable"}], "namespace": "", "module": "inputEx", "guessedname": "DataTable", "methods": {"initFormEditor": {"description": "Create an inputEx form next to the datatable.\nIf this.options.editing == \"formeditor\"", "guessedname": "initFormEditor", "guessedtype": "function"}, "onCellClick": {"description": "Handling cell click events", "guessedname": "onCellClick", "guessedtype": "function"}, "onCancelForm": {"description": "Cancel row edition", "guessedname": "onCancelForm", "guessedtype": "function"}, "hideSubform": {"description": "Hide the form", "guessedname": "hideSubform", "guessedtype": "function"}, "showSubform": {"description": "Show the form", "guessedname": "showSubform", "guessedtype": "function"}, "removeUnsavedRecord": {"description": "Remove the record that has not been saved", "guessedname": "removeUnsavedRecord", "guessedtype": "function"}, "onInsertButton": {"description": "Insert button event handler", "guessedname": "onInsertButton", "guessedtype": "function"}, "fieldToColumndef": {"description": "Convert a single inputEx field definition to a DataTable column definition", "guessedname": "fieldToColumndef", "guessedtype": "function"}, "onEventSelectRow": {"description": "Set the subForm value when a row is selected", "guessedname": "onEventSelectRow", "guessedtype": "function"}, "onSaveForm": {"description": "Save the form value in the dataset", "guessedname": "onSaveForm", "guessedtype": "function"}, "fieldsToColumndefs": {"description": "Convert an inputEx fields definition to a DataTable columns definition", "guessedname": "fieldsToColumndefs", "guessedtype": "function"}, "renderDatatable": {"description": "Render the datatable", "guessedname": "renderDatatable", "guessedtype": "function"}, "deplaceSubForm": {"description": "Deplace the form", "guessedname": "deplaceSubForm", "guessedtype": "function"}, "initCellEditor": {"description": "Make the datatable inplace editable with inputEx fields\nIf this.options.editing == \"celleditor\"", "guessedname": "initCellEditor", "guessedtype": "function"}}, "file": "DataTable-beta.js", "guessedtype": "function", "shortname": "inputEx.widget.DataTable", "events": {"Event fired when an item is removed": {"desc": "YAHOO custom event fired when an item is removed", "params": [{"type": "YAHOO.widget.Record", "name": "Removed", "description": " record"}], "guessedname": "itemRemovedEvt", "guessedtype": "property"}, "Event fired when an item is modified": {"desc": "YAHOO custom event fired when an item is modified", "params": [{"type": "YAHOO.widget.Record", "name": "Modified", "description": " record"}], "guessedname": "itemModifiedEvt", "guessedtype": "property"}, "Event fired when an item is added": {"desc": "YAHOO custom event fired when an item is added", "params": [{"type": "YAHOO.widget.Record", "name": "Added", "description": " record"}], "guessedname": "itemAddedEvt", "guessedtype": "property"}}, "description": "Create an editable datatable"}, "inputEx.TimeField": {"name": "inputEx.TimeField", "constructors": [{"params": [{"type": "Object", "name": "options", "description": " inputEx.Field options object"}], "description": "A field limited to number inputs (floating)"}], "namespace": "", "module": "inputEx", "guessedname": "TimeField", "methods": {"setValue": {"params": [{"type": "String", "name": "str", "description": " Hour string (format HH:MM:SS)"}, {"type": "boolean", "name": "[sendUpdatedEvt]", "description": " (optional) Wether this setValue should fire the updatedEvt or not (default is true, pass false to NOT send the event)"}], "description": "Set the value", "guessedname": "setValue", "guessedtype": "function"}, "getValue": {"return": {"type": "String", "description": "Hour string"}, "description": "Returns a string like HH:MM:SS", "guessedname": "getValue", "guessedtype": "function"}}, "extends": "inputEx.CombineField", "superclass": "inputEx.CombineField", "file": "TimeField.js", "guessedtype": "function", "shortname": "inputEx.TimeField", "description": "A field limited to number inputs (floating)"}, "inputEx.TypeField": {"name": "inputEx.TypeField", "constructors": [{"params": [{"type": "Object", "name": "options", "description": "  Standard inputEx inputParams definition"}], "description": "TypeField is a field to create fields. The user can create any value he wants by switching fields."}], "namespace": "", "module": "inputEx", "guessedname": "TypeField", "methods": {"setValue": {"params": [{"type": "Object", "name": "value", "description": " Type object configuration"}, {"type": "boolean", "name": "[sendUpdatedEvt]", "description": " (optional) Wether this setValue should fire the updatedEvt or not (default is true, pass false to NOT send the event)"}], "description": "Set the value of the label, typeProperties and group", "guessedname": "setValue", "guessedtype": "function"}, "initEvents": {"description": "Adds 2 event listeners: \n- on the button to toggel the propertiesPanel", "guessedname": "initEvents", "guessedtype": "function"}, "updateFieldValue": {"description": "Update the fieldValue", "guessedname": "updateFieldValue", "guessedtype": "function"}, "renderComponent": {"description": "Render the TypeField: create a button with a property panel that contains the field options", "guessedname": "renderComponent", "guessedtype": "function"}, "onTogglePropertiesPanel": {"description": "Toggle the property panel", "guessedname": "onTogglePropertiesPanel", "guessedtype": "function"}, "onChangeGroupOptions": {"description": "Update the fieldValue with the changed properties", "guessedname": "onChangeGroupOptions", "guessedtype": "function"}, "getValue": {"return": {"type": "Object", "description": "Type object configuration"}, "description": "Return the config for a entry in an Group", "guessedname": "getValue", "guessedtype": "function"}, "rebuildGroupOptions": {"description": "Regenerate the property form", "guessedname": "rebuildGroupOptions", "guessedtype": "function"}}, "extends": "inputEx.Field", "superclass": "inputEx.Field", "file": "TypeField.js", "guessedtype": "function", "shortname": "inputEx.TypeField", "properties": {"groupOptions": {"description": "group Options for each field", "guessedname": "groupOptions", "guessedtype": "property"}}, "description": "TypeField is a field to create fields. The user can create any value he wants by switching fields."}, "inputEx.MultiAutoComplete": {"name": "inputEx.MultiAutoComplete", "constructors": [{"params": [{"type": "Object", "name": "options", "description": " Added options:\n<ul>\n</ul>"}], "description": "Create a multi autocomplete field"}], "namespace": "", "module": "inputEx", "guessedname": "MultiAutoComplete", "methods": {"getState": {"description": "Return (stateEmpty|stateRequired) if the value equals the typeInvite attribute", "guessedname": "getState", "guessedtype": "function"}, "renderComponent": {"description": "Build the DDList", "guessedname": "renderComponent", "guessedtype": "function"}, "getValue": {"return": {"type": "Any", "description": "the selected value from the selectValues array"}, "description": "Return the value", "guessedname": "getValue", "guessedtype": "function"}, "setValue": {"params": [{"type": "String", "name": "value", "description": " The value to set"}, {"type": "boolean", "name": "[sendUpdatedEvt]", "description": " (optional) Wether this setValue should fire the updatedEvt or not (default is true, pass false to NOT send the event)"}], "description": "Set the value", "guessedname": "setValue", "guessedtype": "function"}, "validate": {"description": "TODO : how to validate ?", "guessedname": "validate", "guessedtype": "function"}, "onChange": {"params": [{"type": "Event", "name": "e", "description": " The original 'change' event"}], "description": "onChange event handler", "guessedname": "onChange", "guessedtype": "function"}}, "extends": "inputEx.AutoComplete", "superclass": "inputEx.AutoComplete", "file": "MultiAutoComplete.js", "guessedtype": "function", "shortname": "inputEx.MultiAutoComplete", "description": "Create a multi autocomplete field"}, "inputEx.PasswordField": {"name": "inputEx.PasswordField", "constructors": [{"params": [{"type": "Object", "name": "options", "description": " inputEx.Field options object\n<ul>\n<li>confirmPasswordField: the PasswordField instance to compare to when using 2 password fields for password creation (please use the setConfirmationField method)</li>\n<li>strengthIndicator: display a widget to indicate password strength (default false)</li>\n<li>capsLockWarning: display a warning if CapsLock is on (default false)</li>\n</ul>"}], "description": "Create a password field."}], "namespace": "", "module": "inputEx", "guessedname": "PasswordField", "methods": {"setConfirmationField": {"params": [{"type": "inputEx.PasswordField", "name": "passwordField", "description": " The target password field"}], "description": "Set this field as the confirmation for the targeted password field:", "guessedname": "setConfirmationField", "guessedtype": "function"}, "onInput": {"params": [{"type": "Event", "name": "e", "description": " The original input event"}], "description": "Update the state of the confirmation field", "guessedname": "onInput", "guessedtype": "function"}, "onKeyPress": {"description": "callback to display the capsLockWarning", "guessedname": "onKeyPress", "guessedtype": "function"}, "updateStrengthIndicator": {"description": "Update the strength indicator (called by onKeyPress)", "guessedname": "updateStrengthIndicator", "guessedtype": "function"}, "renderComponent": {"description": "Set the el type to 'password'", "guessedname": "renderComponent", "guessedtype": "function"}, "setOptions": {"params": [{"type": "Object", "name": "options", "description": " Options object (inputEx inputParams) as passed to the constructor"}], "description": "Add the password regexp, strengthIndicator, capsLockWarning", "guessedname": "setOptions", "guessedtype": "function"}, "setCapsLockWarning": {"description": "Show or hide the caps lock warning given the status", "guessedname": "setCapsLockWarning", "guessedtype": "function"}, "onKeyUp": {"description": "onkeyup callback to update the strength indicator", "guessedname": "onKeyUp", "guessedtype": "function"}, "getStateString": {"description": "Change the state string", "guessedname": "getStateString", "guessedtype": "function"}, "getPasswordStrength": {"description": "Return an integer within [0,100] that quantify the password strength\nFunction taken from Mozilla Code: (changed a little bit the values)\nhttp://lxr.mozilla.org/seamonkey/source/security/manager/pki/resources/content/password.js", "guessedname": "getPasswordStrength", "guessedtype": "function"}, "validate": {"description": "The validation adds the confirmation password field support", "guessedname": "validate", "guessedtype": "function"}}, "extends": "inputEx.StringField", "superclass": "inputEx.StringField", "file": "PasswordField.js", "guessedtype": "function", "shortname": "inputEx.PasswordField", "description": "Create a password field."}, "inputEx.UneditableField": {"name": "inputEx.UneditableField", "constructors": [{"params": [{"type": "Object", "name": "options", "description": " inputEx.Field options object"}], "description": "Create a uneditable field where you can stick the html you want\nAdded Options:\n<ul>\n<li>visu: inputEx visu type</li>\n</ul>"}], "namespace": "", "module": "inputEx", "guessedname": "UneditableField", "methods": {"setOptions": {"params": [{"type": "Object", "name": "options", "description": " Options object (inputEx inputParams) as passed to the constructor"}], "description": "Set the default values of the options", "guessedname": "setOptions", "guessedtype": "function"}, "setValue": {"params": [{"type": "Any", "name": "val", "description": " The value that will be sent to the visu"}, {"type": "boolean", "name": "[sendUpdatedEvt]", "description": " (optional) Wether this setValue should fire the updatedEvt or not (default is true, pass false to NOT send the event)"}], "description": "Store the value and update the visu", "guessedname": "setValue", "guessedtype": "function"}, "getValue": {"return": {"type": "Any", "description": "The previously stored value"}, "description": "Return the stored value", "guessedname": "getValue", "guessedtype": "function"}}, "extends": "inputEx.Field", "superclass": "inputEx.Field", "file": "UneditableField.js", "guessedtype": "function", "shortname": "inputEx.UneditableField", "description": "Create a uneditable field where you can stick the html you want\nAdded Options:\n<ul>\n<li>visu: inputEx visu type</li>\n</ul>"}, "inputEx.ColorField": {"name": "inputEx.ColorField", "constructors": [{"params": [{"type": "Object", "name": "options", "description": " Added options for ColorField :\n<ul>\n<li>colors: list of colors to load as palette</li>\n<li>palette: default palette to be used (if colors option not provided)</li>\n<li>cellPerLine: how many colored cells in a row on the palette</li>\n<li>ratio: screen-like ratio to display the palette, syntax: [with,height], default: [16,9] (if cellPerLine not provided)</li>\n<li>overlayPadding: padding inside the popup palette</li>\n<li>cellWidth: width of a colored cell</li>\n<li>cellHeight: height of a colored cell</li>\n<li>cellMargin: margin of a colored cell (cell spacing = 2*cellMarging)</li>\n</ul>"}], "description": "Create a Color picker input field"}], "namespace": "", "module": "inputEx", "guessedname": "ColorField", "methods": {"onColorClick": {"params": [{"type": "Event", "name": "e", "description": " The original click event"}], "description": "Handle a color selection", "guessedname": "onColorClick", "guessedtype": "function"}, "setDefaultColors": {"return": {"type": "Array", "description": "List of colors to choose from"}, "params": [{"type": "int", "name": "index", "description": " Index of the palette to use"}], "description": "Set the colors to set in the picker", "guessedname": "setDefaultColors", "guessedtype": "function"}, "renderComponent": {"description": "Render the color button and the colorpicker popup", "guessedname": "renderComponent", "guessedtype": "function"}, "getValue": {"return": {"type": "String", "description": "Color value"}, "description": "Return the color value", "guessedname": "getValue", "guessedtype": "function"}, "setOptions": {"params": [{"type": "Object", "name": "options", "description": " Options object (inputEx inputParams) as passed to the constructor"}], "description": "Adds the 'inputEx-ColorField' default className", "guessedname": "setOptions", "guessedtype": "function"}, "setValue": {"params": [{"type": "String", "name": "value", "description": " Color to set"}, {"type": "boolean", "name": "[sendUpdatedEvt]", "description": " (optional) Wether this setValue should fire the updatedEvt or not (default is true, pass false to NOT send the event)"}], "description": "Set the value", "guessedname": "setValue", "guessedtype": "function"}, "renderColorGrid": {"description": "This creates a color grid", "guessedname": "renderColorGrid", "guessedtype": "function"}, "close": {"description": "Call overlay when field is removed", "guessedname": "close", "guessedtype": "function"}}, "extends": "inputEx.Field", "superclass": "inputEx.Field", "file": "ColorField.js", "guessedtype": "function", "shortname": "inputEx.ColorField", "properties": {"palettes": {"description": "Default palettes", "guessedname": "palettes", "guessedtype": "property"}}, "description": "Create a Color picker input field"}, "inputEx.IPv4Field": {"name": "inputEx.IPv4Field", "constructors": [{"params": [{"type": "Object", "name": "options", "description": " inputEx.Field options object"}], "description": "Adds an IPv4 address regexp"}], "namespace": "", "module": "inputEx", "guessedname": "IPv4Field", "methods": {"setOptions": {"params": [{"type": "Object", "name": "options", "description": " Options object (inputEx inputParams) as passed to the constructor"}], "description": "set IPv4 regexp and invalid string", "guessedname": "setOptions", "guessedtype": "function"}}, "extends": "inputEx.StringField", "superclass": "inputEx.StringField", "file": "IPv4Field.js", "guessedtype": "function", "shortname": "inputEx.IPv4Field", "description": "Adds an IPv4 address regexp"}, "inputEx.JsonSchema.Builder": {"file": "json-schema.js", "namespace": "", "module": "inputEx", "methods": {"defaultReferenceResolver": {"description": "return a schema based on the reference value default is to look up in map", "guessedname": "defaultReferenceResolver", "guessedtype": "function"}, "schemaToInputEx": {"params": [{"type": "JSONSchema", "name": "p", "description": ""}], "description": "Convert a JSON schema to inputEx JSON", "guessedname": "schemaToInputEx", "guessedtype": "function"}, "formFromInstance": {"description": "Create an inputEx Json form definition from a json schema instance object\nRespect the \"Self-Defined Schema Convention\"", "guessedname": "formFromInstance", "guessedtype": "function"}}, "guessedname": "Builder", "guessedtype": "function", "shortname": "inputEx.JsonSchema.Builder", "properties": {"referenceResolver": {"guessedname": "referenceResolver", "guessedtype": "property"}, "defaultOptions": {"description": "options to be applied to inputParams unless already specified", "guessedname": "defaultOptions", "guessedtype": "property"}, "schemaToParamMap": {"description": "specify how other schema properties are mapped to inputParam properties", "guessedname": "schemaToParamMap", "guessedtype": "property"}, "schemaIdentifierMap": {"description": "key is reference, value is schema", "guessedname": "schemaIdentifierMap", "guessedtype": "property"}}, "name": "inputEx.JsonSchema.Builder"}, "inputEx.Lens": {"name": "inputEx.Lens", "constructors": [{"params": [{"type": "Object", "name": "options", "description": " Added options:\n<ul>\n<li>lens: html code for the lens. Fields will be displayed in the div elements that has the classname named \"field-(field name)\"</li>\n<li>visus: list of visualization for each field</li>\n</ul>"}], "description": "Display a group with inplace edit and custom template"}], "namespace": "", "module": "inputEx", "guessedname": "Lens", "methods": {"setOptions": {"description": "Set additional options", "guessedname": "setOptions", "guessedtype": "function"}, "renderFields": {"description": "Render each the fields in each div which class attribute is \"field-\"+fieldName", "guessedname": "renderFields", "guessedtype": "function"}}, "extends": "inputEx.Group", "superclass": "inputEx.Group", "file": "Lens-beta.js", "guessedtype": "function", "shortname": "inputEx.Lens", "description": "Display a group with inplace edit and custom template"}, "inputEx.CombineField": {"name": "inputEx.CombineField", "constructors": [{"params": [{"type": "Object", "name": "options", "description": " Added options:\n<ul>\n<li>separators: array of string inserted</li>\n<li>fields: list of fields in inputEx-typed-JSON</li>\n</ul>"}], "description": "A meta field to put N fields on the same line, separated by separators"}], "namespace": "", "module": "inputEx", "guessedname": "CombineField", "methods": {"setValue": {"params": [{"type": "Array", "name": "values", "description": " [value1, value2, ...]"}, {"type": "boolean", "name": "[sendUpdatedEvt]", "description": " (optional) Wether this setValue should fire the updatedEvt or not (default is true, pass false to NOT send the event)"}], "description": "Set the value", "guessedname": "setValue", "guessedtype": "function"}, "renderComponent": {"description": "Render the two subfields", "guessedname": "renderComponent", "guessedtype": "function"}, "setClassFromState": {"description": "Call setClassFromState on all children", "guessedname": "setClassFromState", "guessedtype": "function"}, "getValue": {"return": {"type": "Array", "description": "An array of values [value1, value2, ...]"}, "description": "Specific getValue", "guessedname": "getValue", "guessedtype": "function"}, "setOptions": {"params": [{"type": "Object", "name": "options", "description": " Options object (inputEx inputParams) as passed to the constructor"}], "description": "Set the default values of the options", "guessedname": "setOptions", "guessedtype": "function"}, "isEmpty": {"description": "Useful for getState to return correct state (required, empty, etc...)", "guessedname": "isEmpty", "guessedtype": "function"}, "validate": {"returns": "{Boolean} true if all fields validate and required fields are not empty", "description": "Validate each field", "guessedname": "validate", "guessedtype": "function"}, "clear": {"params": [{"type": "boolean", "name": "[sendUpdatedEvt]", "description": " (optional) Wether this clear should fire the updatedEvt or not (default is true, pass false to NOT send the event)"}], "description": "Clear all subfields", "guessedname": "clear", "guessedtype": "function"}, "renderField": {"params": [{"type": "Object", "name": "fieldOptions", "description": " The field properties as required bu inputEx.buildField"}], "description": "Instanciate one field given its parameters, type or fieldClass", "guessedname": "renderField", "guessedtype": "function"}}, "extends": "inputEx.Field", "superclass": "inputEx.Field", "file": "CombineField.js", "guessedtype": "function", "shortname": "inputEx.CombineField", "description": "A meta field to put N fields on the same line, separated by separators"}, "inputEx.Field": {"name": "inputEx.Field", "constructors": [{"params": [{"type": "Object", "name": "options", "description": " Configuration object\n<ul>\n<li>name: the name of the field</li>\n<li>required: boolean, the field cannot be null if true</li>\n<li>className: CSS class name for the div wrapper (default 'inputEx-Field')</li>\n<li>value: initial value</li>\n<li>parentEl: HTMLElement or String id, append the field to this DOM element</li>\n</ul>"}], "description": "An abstract class (never instantiated) that contains the shared features for all fields."}], "namespace": "", "module": "inputEx", "properties": {"options": {"description": "Configuration object to set the options for this class and the parent classes. See constructor details for options added by this class.", "guessedname": "options", "guessedtype": "property"}}, "guessedname": "Field", "methods": {"validate": {"return": {"type": "Boolean", "description": "field validation status (true/false)"}, "description": "Validation of the field", "guessedname": "validate", "guessedtype": "function"}, "render": {"description": "Default render of the dom element. Create a divEl that wraps the field.", "guessedname": "render", "guessedtype": "function"}, "show": {"description": "Show the field", "guessedname": "show", "guessedtype": "function"}, "focus": {"description": "Focus the field", "guessedname": "focus", "guessedtype": "function"}, "setClassFromState": {"description": "Set the styles for valid/invalide state", "guessedname": "setClassFromState", "guessedtype": "function"}, "getState": {"return": {"type": "String", "description": "One of the following states: 'empty', 'required', 'valid' or 'invalid'"}, "description": "Returns the current state (given its value)", "guessedname": "getState", "guessedtype": "function"}, "enable": {"description": "Enable the field", "guessedname": "enable", "guessedtype": "function"}, "close": {"description": "Close the field and eventually opened popups...", "guessedname": "close", "guessedtype": "function"}, "getStateString": {"description": "Get the string for the given state", "guessedname": "getStateString", "guessedtype": "function"}, "hide": {"description": "Hide the field", "guessedname": "hide", "guessedtype": "function"}, "initEvents": {"description": "Initialize events of the Input", "guessedname": "initEvents", "guessedtype": "function"}, "renderComponent": {"description": "Render the interface component into this.divEl", "guessedname": "renderComponent", "guessedtype": "function"}, "getEl": {"return": {"type": "HTMLElement", "description": "divEl The main DIV wrapper"}, "description": "The default render creates a div to put in the messages", "guessedname": "getEl", "guessedtype": "function"}, "isEmpty": {"description": "Should return true if empty", "guessedname": "isEmpty", "guessedtype": "function"}, "destroy": {"description": "Purge all event listeners and remove the component from the dom", "guessedname": "destroy", "guessedtype": "function"}, "onChange": {"params": [{"type": "Event", "name": "e", "description": " The original 'change' event"}], "description": "onChange event handler", "guessedname": "onChange", "guessedtype": "function"}, "setValue": {"params": [{"type": "Any", "name": "value", "description": " The new value"}, {"type": "boolean", "name": "[sendUpdatedEvt]", "description": " (optional) Wether this setValue should fire the updatedEvt or not (default is true, pass false to NOT send the event)"}], "description": "Function to set the value", "guessedname": "setValue", "guessedtype": "function"}, "setOptions": {"params": [{"type": "Object", "name": "options", "description": " Options object (inputEx inputParams) as passed to the constructor"}], "description": "Set the default values of the options", "guessedname": "setOptions", "guessedtype": "function"}, "disable": {"description": "Disable the field", "guessedname": "disable", "guessedtype": "function"}, "onFocus": {"params": [{"type": "Event", "name": "e", "description": " The original 'focus' event"}], "description": "Function called on the focus event", "guessedname": "onFocus", "guessedtype": "function"}, "displayMessage": {"params": [{"type": "String", "name": "msg", "description": " Message to display"}], "description": "Update the message", "guessedname": "displayMessage", "guessedtype": "function"}, "onBlur": {"params": [{"type": "Event", "name": "e", "description": " The original 'blur' event"}], "description": "Function called on the blur event", "guessedname": "onBlur", "guessedtype": "function"}, "clear": {"params": [{"type": "boolean", "name": "[sendUpdatedEvt]", "description": " (optional) Wether this clear should fire the updatedEvt or not (default is true, pass false to NOT send the event)"}], "description": "Clear the field by setting the field value to this.options.value", "guessedname": "clear", "guessedtype": "function"}, "getValue": {"return": {"type": "Any", "description": "value of the field"}, "description": "Return the value of the input", "guessedname": "getValue", "guessedtype": "function"}, "fireUpdatedEvt": {"description": "Fire the \"updated\" event (only if the field validated)\nEscape the stack using a setTimeout", "guessedname": "fireUpdatedEvt", "guessedtype": "function"}}, "file": "Field.js", "guessedtype": "function", "shortname": "inputEx.Field", "events": {"updatedEvt": {"desc": "YAHOO custom event fired when the field is \"updated\"<br /> subscribe with: this.updatedEvt.subscribe(function(e, params) { var value = params[0]; console.log(\"updated\",value, this.updatedEvt); }, this, true);", "params": [{"type": "Any", "name": "value", "description": " The new value of the field"}], "description": "Event fired after the user changed the value of the field.", "guessedname": "updatedEvt", "guessedtype": "property"}}, "description": "An abstract class (never instantiated) that contains the shared features for all fields."}, "inputEx.EmailField": {"name": "inputEx.EmailField", "constructors": [{"params": [{"type": "Object", "name": "options", "description": " inputEx.Field options object"}], "description": "Field that adds the email regexp for validation. Result is always lower case."}], "namespace": "", "module": "inputEx", "guessedname": "EmailField", "methods": {"setOptions": {"params": [{"type": "Object", "name": "options", "description": " Options object (inputEx inputParams) as passed to the constructor"}], "description": "Set the email regexp and invalid message", "guessedname": "setOptions", "guessedtype": "function"}, "getValue": {"return": {"type": "String", "description": "The email string"}, "description": "Set the value to lower case since email have no case", "guessedname": "getValue", "guessedtype": "function"}}, "extends": "inputEx.StringField", "superclass": "inputEx.StringField", "file": "EmailField.js", "guessedtype": "function", "shortname": "inputEx.EmailField", "description": "Field that adds the email regexp for validation. Result is always lower case."}, "inputEx.RTEField": {"name": "inputEx.RTEField", "constructors": [{"params": [{"type": "Object", "name": "options", "description": " Added options:\n<ul>\n<li>opts: the options to be added when calling the RTE constructor (see YUI RTE)</li>\n<li>type: if == 'simple', the field will use the SimpleEditor. Any other value will use the Editor class.</li>\n</ul>"}], "description": "Wrapper for the Rich Text Editor from YUI"}], "namespace": "", "module": "inputEx", "guessedname": "RTEField", "methods": {"setOptions": {"params": [{"type": "Object", "name": "options", "description": " Options object (inputEx inputParams) as passed to the constructor"}], "description": "Set the default values of the options", "guessedname": "setOptions", "guessedtype": "function"}, "renderComponent": {"description": "Render the field using the YUI Editor widget", "guessedname": "renderComponent", "guessedtype": "function"}, "setValue": {"params": [{"type": "String", "name": "value", "description": " The html string"}, {"type": "boolean", "name": "[sendUpdatedEvt]", "description": " (optional) Wether this setValue should fire the updatedEvt or not (default is true, pass false to NOT send the event)"}], "description": "Set the html content", "guessedname": "setValue", "guessedtype": "function"}, "getValue": {"return": {"type": "String", "description": "the html string"}, "description": "Get the html string", "guessedname": "getValue", "guessedtype": "function"}}, "extends": "inputEx.Field", "superclass": "inputEx.Field", "file": "RTEField.js", "guessedtype": "function", "shortname": "inputEx.RTEField", "description": "Wrapper for the Rich Text Editor from YUI"}, "inputEx.widget.DDListItem": {"name": "inputEx.widget.DDListItem", "constructors": [{"params": [{"type": "String", "name": "id", "description": ""}], "description": "DDProxy for DDList items (used by DDList)"}], "namespace": "", "module": "inputEx", "guessedname": "DDListItem", "methods": {"onDragDrop": {"guessedname": "onDragDrop", "guessedtype": "function"}, "onDrag": {"description": "Keep track of the direction of the drag for use during onDragOver", "guessedname": "onDrag", "guessedtype": "function"}, "startDrag": {"description": "Create the proxy element", "guessedname": "startDrag", "guessedtype": "function"}, "onDragOver": {"guessedname": "onDragOver", "guessedtype": "function"}, "endDrag": {"description": "Handle the endDrag and eventually fire the listReordered event", "guessedname": "endDrag", "guessedtype": "function"}}, "extends": "YAHOO.util.DDProxy", "superclass": "YAHOO.util.DDProxy", "file": "ddlist.js", "guessedtype": "function", "shortname": "inputEx.widget.DDListItem", "description": "DDProxy for DDList items (used by DDList)"}, "inputEx.InPlaceEdit": {"name": "inputEx.InPlaceEdit", "constructors": [{"params": [{"type": "Object", "name": "options", "description": " Added options:\n<ul>\n<li>visu</li>\n<li>editorField</li>\n<li>animColors</li>\n</ul>"}], "description": "Meta field providing in place editing (the editor appears when you click on the formatted value)."}], "namespace": "", "module": "inputEx", "guessedname": "InPlaceEdit", "methods": {"onOkEditor": {"description": "Validate the editor (ok button, enter key or tabulation key)", "guessedname": "onOkEditor", "guessedtype": "function"}, "setValue": {"params": [{"type": "Any", "name": "value", "description": " The value to set"}, {"type": "boolean", "name": "[sendUpdatedEvt]", "description": " (optional) Wether this setValue should fire the updatedEvt or not (default is true, pass false to NOT send the event)"}], "description": "Set the value and update the display", "guessedname": "setValue", "guessedtype": "function"}, "onVisuMouseOver": {"params": [{"type": "Event", "name": "e", "description": " The original mouseover event"}], "description": "Set the color when hovering the field", "guessedname": "onVisuMouseOver", "guessedtype": "function"}, "openEditor": {"description": "Display the editor", "guessedname": "openEditor", "guessedtype": "function"}, "initEvents": {"description": "Adds the events for the editor and color animations", "guessedname": "initEvents", "guessedtype": "function"}, "onVisuMouseOut": {"params": [{"type": "Event", "name": "e", "description": " The original mouseout event"}], "description": "Start the color animation when hovering the field", "guessedname": "onVisuMouseOut", "guessedtype": "function"}, "renderComponent": {"description": "Override renderComponent to create 2 divs: the visualization one, and the edit in place form", "guessedname": "renderComponent", "guessedtype": "function"}, "onKeyDown": {"params": [{"type": "Event", "name": "e", "description": " The original keydown event"}], "description": "Handle the tabulation key to close the editor", "guessedname": "onKeyDown", "guessedtype": "function"}, "getValue": {"return": {"type": "Any", "description": "The value of the subfield"}, "description": "Returned the previously stored value", "guessedname": "getValue", "guessedtype": "function"}, "setOptions": {"params": [{"type": "Object", "name": "options", "description": " Options object (inputEx inputParams) as passed to the constructor"}], "description": "Set the default values of the options", "guessedname": "setOptions", "guessedtype": "function"}, "renderVisuDiv": {"description": "Create the div that will contain the visualization of the value", "guessedname": "renderVisuDiv", "guessedtype": "function"}, "onKeyUp": {"params": [{"type": "Event", "name": "e", "description": " The original keyup event"}], "description": "Handle some keys events to close the editor", "guessedname": "onKeyUp", "guessedtype": "function"}, "close": {"description": "Close the editor when calling the close function on this field", "guessedname": "close", "guessedtype": "function"}, "onCancelEditor": {"params": [{"type": "Event", "name": "e", "description": " The original event (click, blur or keydown)"}], "description": "Close the editor on cancel (cancel button, blur event or escape key)", "guessedname": "onCancelEditor", "guessedtype": "function"}, "renderEditor": {"description": "Render the editor", "guessedname": "renderEditor", "guessedtype": "function"}}, "extends": "inputEx.Field", "superclass": "inputEx.Field", "file": "InPlaceEdit.js", "guessedtype": "function", "shortname": "inputEx.InPlaceEdit", "description": "Meta field providing in place editing (the editor appears when you click on the formatted value)."}, "inputEx.ColorField2": {"name": "inputEx.ColorField2", "constructors": [{"params": [{"type": "Object", "name": "options", "description": " inputEx.Field options object"}], "description": "Create a Color picker input field"}], "namespace": "", "module": "inputEx", "guessedname": "ColorField2", "methods": {"setValue": {"params": [{"type": "String", "name": "value", "description": " Color to set"}], "description": "Set the value", "guessedname": "setValue", "guessedtype": "function"}, "initEvents": {"description": "Register the click and blur events", "guessedname": "initEvents", "guessedtype": "function"}, "renderComponent": {"description": "Render the color button and the colorpicker popup", "guessedname": "renderComponent", "guessedtype": "function"}, "renderPopUp": {"description": "Render the color popup", "guessedname": "renderPopUp", "guessedtype": "function"}, "onColorClick": {"params": [{"type": "Event", "name": "e", "description": " The original click event"}], "description": "Handle a color selection", "guessedname": "onColorClick", "guessedtype": "function"}, "setDefaultColors": {"return": {"type": "Array", "description": "List of colors to choose from"}, "params": [{"type": "int", "name": "index", "description": " Index of the palette to use"}], "description": "Set the colors to set in the picker", "guessedname": "setDefaultColors", "guessedtype": "function"}, "renderColorGrid": {"description": "This creates a color grid", "guessedname": "renderColorGrid", "guessedtype": "function"}, "toggleColorPopUp": {"description": "Toggle the color picker popup", "guessedname": "toggleColorPopUp", "guessedtype": "function"}, "close": {"description": "Call closeColorPopUp when field is removed", "guessedname": "close", "guessedtype": "function"}, "gettValue": {"description": "Get the value", "guessedname": "gettValue", "guessedtype": "function"}, "closeColorPopUp": {"description": "Close the popup", "guessedname": "closeColorPopUp", "guessedtype": "function"}}, "extends": "inputEx.Field", "superclass": "inputEx.Field", "file": "ColorField2.js", "guessedtype": "function", "shortname": "inputEx.ColorField2", "properties": {"cellPerLine": {"description": "How many color cells shall be shown in every line in the popup panel.\r\nif defined, cellPerLine*squareWidth+leftMargin = popupPanel.width, otherwise, there is a formula to determine cell size", "guessedname": "cellPerLine", "guessedtype": "property"}, "palettes": {"description": "Default palettes", "guessedname": "palettes", "guessedtype": "property"}}, "description": "Create a Color picker input field"}, "inputEx.ListField": {"name": "inputEx.ListField", "constructors": [{"params": [{"type": "type: 'string'", "name": "options", "description": " Added options:\n<ul>\n<li>sortable: Add arrows to sort the items if true (default false)</li>\n<li>elementType: an element type definition (default is )</li>\n<li>useButtons: use buttons instead of links (default false)</li>\n<li>unique: require values to be unique (default false)</li>\n<li>listAddLabel: if useButtons is false, text to add an item</li>\n<li>listRemoveLabel: if useButtons is false, text to remove an item</li>\n</ul>"}], "description": "Meta field to create a list of other fields"}], "namespace": "", "module": "inputEx", "guessedname": "ListField", "methods": {"onDelete": {"params": [{"type": "Event", "name": "e", "description": " The original click event"}], "description": "Called when the user clicked on a delete button.", "guessedname": "onDelete", "guessedtype": "function"}, "setValue": {"params": [{"type": "Array", "name": "value", "description": " The list of values to set"}, {"type": "boolean", "name": "[sendUpdatedEvt]", "description": " (optional) Wether this setValue should fire the updatedEvt or not (default is true, pass false to NOT send the event)"}], "description": "Set the value of all the subfields", "guessedname": "setValue", "guessedtype": "function"}, "onArrowDown": {"params": [{"type": "Event", "name": "e", "description": " Original click event"}], "description": "Switch a subField with its next one\nCalled when the user clicked on the down arrow of a sortable list", "guessedname": "onArrowDown", "guessedtype": "function"}, "initEvents": {"description": "Handle the click event on the add button", "guessedname": "initEvents", "guessedtype": "function"}, "removeElement": {"params": [{"type": "integer", "name": "index", "description": " The index of the element to remove"}], "description": "Remove the line from the dom and the subField from the list.", "guessedname": "removeElement", "guessedtype": "function"}, "renderComponent": {"description": "Render the addButton", "guessedname": "renderComponent", "guessedtype": "function"}, "renderSubField": {"return": {"type": "inputEx.Field", "description": "instance of the created field (inputEx.Field or derivative)"}, "params": [{"type": "Any", "name": "The", "description": " initial value of the subfield to create"}], "description": "Adds a new line to the List Field", "guessedname": "renderSubField", "guessedtype": "function"}, "getValue": {"return": {"type": "Array", "description": "The array"}, "description": "Return the array of values", "guessedname": "getValue", "guessedtype": "function"}, "setOptions": {"params": [{"type": "Object", "name": "options", "description": " Options object (inputEx inputParams) as passed to the constructor"}], "description": "Set the ListField classname", "guessedname": "setOptions", "guessedtype": "function"}, "onAddButton": {"params": [{"type": "Event", "name": "e", "description": " The original click event"}], "description": "Add a new element to the list and fire updated event", "guessedname": "onAddButton", "guessedtype": "function"}, "validate": {"returns": "{Boolean} true if all fields validate, required fields are not empty and unique constraint (if specified) is not violated", "description": "Validate each field", "guessedname": "validate", "guessedtype": "function"}, "onArrowUp": {"params": [{"type": "Event", "name": "e", "description": " Original click event"}], "description": "Switch a subField with its previous one\nCalled when the user clicked on the up arrow of a sortable list", "guessedname": "onArrowUp", "guessedtype": "function"}, "addElement": {"return": {"type": "inputEx.Field", "description": "SubField added instance"}, "params": [{"type": "Any", "name": "The", "description": " initial value of the subfield to create"}], "description": "Adds an element", "guessedname": "addElement", "guessedtype": "function"}}, "extends": "inputEx.Field", "superclass": "inputEx.Field", "file": "ListField.js", "guessedtype": "function", "shortname": "inputEx.ListField", "properties": {"subFields": {"description": "List of all the subField instances", "guessedname": "subFields", "guessedtype": "property"}}, "description": "Meta field to create a list of other fields"}, "inputEx.IntegerField": {"name": "inputEx.IntegerField", "constructors": [{"params": [{"type": "Object", "name": "options", "description": " Added options:\n<ul>\n<li>negative: boolean indicating if we accept boolean numbers</li>\n</ul>"}], "description": "A field limited to number inputs"}], "namespace": "", "module": "inputEx", "guessedname": "IntegerField", "methods": {"setOptions": {"params": [{"type": "Object", "name": "options", "description": ""}], "description": "Adds the negative option", "guessedname": "setOptions", "guessedtype": "function"}, "validate": {"description": "Validate  if is a number", "guessedname": "validate", "guessedtype": "function"}, "getValue": {"return": {"type": "int", "description": "The integer value"}, "description": "Get the value", "guessedname": "getValue", "guessedtype": "function"}}, "extends": "inputEx.StringField", "superclass": "inputEx.StringField", "file": "IntegerField.js", "guessedtype": "function", "shortname": "inputEx.IntegerField", "description": "A field limited to number inputs"}, "inputEx.TreeField": {"name": "inputEx.TreeField", "constructors": [{"params": [{"type": "Object", "name": "options", "description": " inputEx.Field options object"}], "description": "Meta field to create trees"}], "namespace": "", "module": "inputEx", "guessedname": "TreeField", "methods": {"renderComponent": {"description": "Render the addButton and childContainer", "guessedname": "renderComponent", "guessedtype": "function"}, "setValue": {"params": [{"type": "Any", "name": "obj", "description": " The tree object"}, {"type": "boolean", "name": "[sendUpdatedEvt]", "description": " (optional) Wether this setValue should fire the updatedEvt or not (default is true, pass false to NOT send the event)"}], "description": "Set the value", "guessedname": "setValue", "guessedtype": "function"}, "renderSubField": {"return": {"type": "inputEx.Field", "description": "instance of the created field (inputEx.Field or derivative)"}, "params": [{"type": "Any", "name": "value", "description": " Value of the subelement"}], "description": "Adds a new line to the List Field", "guessedname": "renderSubField", "guessedtype": "function"}, "getValue": {"return": {"type": "Any", "description": "The tree object"}, "description": "Get the value", "guessedname": "getValue", "guessedtype": "function"}}, "extends": "inputEx.ListField", "superclass": "inputEx.ListField", "file": "TreeField.js", "guessedtype": "function", "shortname": "inputEx.TreeField", "description": "Meta field to create trees"}, "inputEx.JsonSchema": {"name": "inputEx.JsonSchema", "namespace": "", "module": "inputEx", "guessedname": "JsonSchema", "methods": {"inputExToSchema": {"description": "Convert the inputEx JSON fields to a JSON schema", "guessedname": "inputExToSchema", "guessedtype": "function"}}, "static": "", "file": "json-schema.js", "guessedtype": "property", "shortname": "inputEx.JsonSchema", "description": "Namespace containing utility functions for conversion between inputEx JSON format and JSON Schema\nbased on \"Json Schema Proposal Working Draft\":\nhttp://groups.google.com/group/json-schema/web/json-schema-proposal-working-draft\nThe proposal is still under discussion and the implementation is very minimalist.\nTODO:\n- we should provide a lot of json schema examples and instances that should/should not validate\n- use the $ref (async calls => provide callbacks to methods)\n- Inheritance\nLimitations:\n- ??? Please do not trust inputEx: the getValue may return a value which do NOT validate the schema (provide an example ?)\n- no tuple typing for arrays\n- no \"Union type definition\""}, "inputEx.widget.JsonTreeInspector": {"name": "inputEx.widget.JsonTreeInspector", "constructors": [{"params": [{"type": "String|HTMLElement", "name": "parentEl", "description": " where to append the tree"}, {"type": "Object", "name": "object", "description": " the object to inspect"}], "description": "Create a treeview to inspect a javascript object"}], "namespace": "", "module": "inputEx", "guessedname": "JsonTreeInspector", "methods": {"buildBranch": {"description": "Build the sub-branch for obj", "guessedname": "buildBranch", "guessedtype": "function"}, "onItemClick": {"description": "When the user click on a node", "guessedname": "onItemClick", "guessedtype": "function"}, "expand": {"description": "TODO", "guessedname": "expand", "guessedtype": "function"}}, "file": "json-tree-inspector.js", "guessedtype": "function", "shortname": "inputEx.widget.JsonTreeInspector", "description": "Create a treeview to inspect a javascript object"}, "inputEx.widget.FastTable": {"name": "inputEx.widget.FastTable", "constructors": [{"params": [{"type": "Object", "name": "options", "description": " Options:\n<ul>\n<li>parentEl</li>\n<li>fields</li>\n<li>datasource</li>\n</ul>"}], "description": "Create an table where all cells are opened data editor"}], "namespace": "", "module": "inputEx", "guessedname": "FastTable", "methods": {"onDeleteItem": {"description": "Handle clicks on the delete Button", "guessedname": "onDeleteItem", "guessedtype": "function"}, "populate": {"description": "Insert the options", "guessedname": "populate", "guessedtype": "function"}, "render": {"description": "Render the widget dom", "guessedname": "render", "guessedtype": "function"}, "onFieldUpdated": {"description": "Handle updated events from fields", "guessedname": "onFieldUpdated", "guessedtype": "function"}, "onAddItem": {"description": "Handle clicks on the add Button", "guessedname": "onAddItem", "guessedtype": "function"}, "setOptions": {"description": "Set the options", "guessedname": "setOptions", "guessedtype": "function"}, "renderThead": {"description": "render the thead element", "guessedname": "renderThead", "guessedtype": "function"}, "addRow": {"description": "Add a row", "guessedname": "addRow", "guessedtype": "function"}, "onDatasourceSuccess": {"description": "Callback for request success", "guessedname": "onDatasourceSuccess", "guessedtype": "function"}, "cleanDirtyCell": {"description": "Clean a cell marked as dirty", "guessedname": "cleanDirtyCell", "guessedtype": "function"}, "onDatasourceFailure": {"description": "Callback for request failure", "guessedname": "onDatasourceFailure", "guessedtype": "function"}, "sendDataRequest": {"description": "Send the datasource request", "guessedname": "sendDataRequest", "guessedtype": "function"}}, "file": "FastTable-beta.js", "guessedtype": "function", "shortname": "inputEx.widget.FastTable", "description": "Create an table where all cells are opened data editor"}, "inputEx.SliderField": {"name": "inputEx.SliderField", "constructors": [{"params": [{"type": "Object", "name": "options", "description": " inputEx.Field options object"}], "description": "Create a slider using YUI widgets"}], "namespace": "", "module": "inputEx", "guessedname": "SliderField", "methods": {"setOptions": {"params": [{"type": "Object", "name": "options", "description": " Options object (inputEx inputParams) as passed to the constructor"}], "description": "Set the classname to 'inputEx-SliderField'", "guessedname": "setOptions", "guessedtype": "function"}, "renderComponent": {"description": "render a slider widget", "guessedname": "renderComponent", "guessedtype": "function"}, "setValue": {"params": [{"type": "Any", "name": "value", "description": " The new value"}, {"type": "boolean", "name": "[sendUpdatedEvt]", "description": " (optional) Wether this setValue should fire the updatedEvt or not (default is true, pass false to NOT send the event)"}], "description": "Function to set the value", "guessedname": "setValue", "guessedtype": "function"}, "getValue": {"return": {"type": "int", "description": "The integer value"}, "description": "Get the value from the slider", "guessedname": "getValue", "guessedtype": "function"}}, "extends": "inputEx.Field", "superclass": "inputEx.Field", "file": "SliderField.js", "guessedtype": "function", "shortname": "inputEx.SliderField", "description": "Create a slider using YUI widgets"}, "inputEx.BirthdateField": {"name": "inputEx.BirthdateField", "namespace": "", "module": "inputEx", "guessedname": "BirthdateField", "extends": "inputEx.CombineField", "superclass": "inputEx.CombineField", "file": "BirthdateField.js", "guessedtype": "function", "shortname": "inputEx.BirthdateField", "description": "A field to enter a date with 2 strings and a select"}, "inputEx.ImagemapField": {"name": "inputEx.ImagemapField", "constructors": [{"params": [{"type": "Object", "name": "options", "description": " inputEx.Field options object"}], "description": "Create an image map field"}], "namespace": "", "module": "inputEx", "guessedname": "ImagemapField", "methods": {"setValue": {"params": [{"type": "String", "name": "value", "description": " Color to set"}], "description": "Set the value", "guessedname": "setValue", "guessedtype": "function"}, "initEvents": {"description": "Register the click and blur events", "guessedname": "initEvents", "guessedtype": "function"}, "renderComponent": {"description": "Render the image and the imagemap popup", "guessedname": "renderComponent", "guessedtype": "function"}, "renderPopUp": {"description": "Render the imagemap popup", "guessedname": "renderPopUp", "guessedtype": "function"}, "closeImagemapPopUp": {"description": "Close the popup", "guessedname": "closeImagemapPopUp", "guessedtype": "function"}, "onImageClick": {"params": [{"type": "Event", "name": "e", "description": " The original click event"}], "description": "Handle a image map area selection", "guessedname": "onImageClick", "guessedtype": "function"}, "close": {"description": "Call closeImagemapPopUp when field is removed", "guessedname": "close", "guessedtype": "function"}, "toggleImagemapPopUp": {"description": "Toggle the imagemap picker popup", "guessedname": "toggleImagemapPopUp", "guessedtype": "function"}}, "extends": "inputEx.Field", "superclass": "inputEx.Field", "file": "ImagemapField.js", "guessedtype": "function", "shortname": "inputEx.ImagemapField", "description": "Create an image map field"}, "inputEx.UrlField": {"name": "inputEx.UrlField", "constructors": [{"params": [{"type": "Object", "name": "options", "description": " inputEx.Field options object\n<ul>\n<li>favicon: boolean whether the domain favicon.ico should be displayed or not (default is true, except for https)</li>\n</ul>"}], "description": "Adds an url regexp, and display the favicon at this url"}], "namespace": "", "module": "inputEx", "guessedname": "UrlField", "methods": {"setOptions": {"params": [{"type": "Object", "name": "options", "description": " Options object (inputEx inputParams) as passed to the constructor"}], "description": "Adds the invalid Url message", "guessedname": "setOptions", "guessedtype": "function"}, "displayFavicon": {"description": "Display the favicon if the icon was found (use of the naturalWidth property)", "guessedname": "displayFavicon", "guessedtype": "function"}, "render": {"description": "Adds a img tag before the field to display the favicon", "guessedname": "render", "guessedtype": "function"}}, "extends": "inputEx.StringField", "superclass": "inputEx.StringField", "file": "UrlField.js", "guessedtype": "function", "shortname": "inputEx.UrlField", "description": "Adds an url regexp, and display the favicon at this url"}, "inputEx.DateTimeField": {"name": "inputEx.DateTimeField", "constructors": [{"params": [{"type": "Object", "name": "options", "description": " Added options\n<ul>\n<li>dateFormat: same as DateField</li>\n</ul>"}], "description": "A field limited to number inputs (floating)"}], "namespace": "", "module": "inputEx", "guessedname": "DateTimeField", "methods": {"setValue": {"params": [{"type": "Date", "name": "val", "description": " Date to set"}, {"type": "boolean", "name": "[sendUpdatedEvt]", "description": " (optional) Wether this setValue should fire the updatedEvt or not (default is true, pass false to NOT send the event)"}], "description": "Set the value of both subfields", "guessedname": "setValue", "guessedtype": "function"}, "getValue": {"return": {"type": "Date", "description": "The javascript Date object"}, "description": "Concat the values to return a date", "guessedname": "getValue", "guessedtype": "function"}}, "extends": "inputEx.CombineField", "superclass": "inputEx.CombineField", "file": "DateTimeField.js", "guessedtype": "function", "shortname": "inputEx.DateTimeField", "description": "A field limited to number inputs (floating)"}, "inputEx.MultiSelectField": {"name": "inputEx.MultiSelectField", "constructors": [{"params": [{"type": "Object", "name": "options", "description": " Added options:\n<ul>\n<li>selectValues: contains the list of options values</li>\n<li>selectOptions: list of option element texts</li>\n</ul>"}], "description": "Create a multi select field"}], "namespace": "", "module": "inputEx", "guessedname": "MultiSelectField", "methods": {"onAddNewItem": {"description": "Add an item to the list when the select changed", "guessedname": "onAddNewItem", "guessedtype": "function"}, "initEvents": {"description": "Register the \"change\" event", "guessedname": "initEvents", "guessedtype": "function"}, "renderComponent": {"description": "Build the DDList", "guessedname": "renderComponent", "guessedtype": "function"}, "getValue": {"return": {"type": "Any", "description": "the selected value from the selectValues array"}, "description": "Return the value", "guessedname": "getValue", "guessedtype": "function"}, "setValue": {"params": [{"type": "String", "name": "value", "description": " The value to set"}, {"type": "boolean", "name": "[sendUpdatedEvt]", "description": " (optional) Wether this setValue should fire the updatedEvt or not (default is true, pass false to NOT send the event)"}], "description": "Set the value of the list", "guessedname": "setValue", "guessedtype": "function"}, "onItemRemoved": {"description": "Re-enable the option element when an item is removed by the user", "guessedname": "onItemRemoved", "guessedtype": "function"}}, "extends": "inputEx.SelectField", "superclass": "inputEx.SelectField", "file": "MultiSelectField.js", "guessedtype": "function", "shortname": "inputEx.MultiSelectField", "description": "Create a multi select field"}, "inputEx.RadioButton": {"name": "inputEx.RadioButton", "constructors": [{"params": [{"type": "Object", "name": "options", "description": " inputEx.Field options object"}], "description": "Create a YUI Radio button. Here are the added options :\n<ul>\n<li>choices: list of choices (array of string)</li>\n<li>values: list of returned values (array )</li>\n<li>allowAny: add an option with a string field</li>\n</ul>"}], "namespace": "", "module": "inputEx", "guessedname": "RadioButton", "extends": "inputEx.RadioField", "superclass": "inputEx.RadioField", "file": "RadioButton.js", "guessedtype": "function", "shortname": "inputEx.RadioButton", "description": "Create a YUI Radio button. Here are the added options :\n<ul>\n<li>choices: list of choices (array of string)</li>\n<li>values: list of returned values (array )</li>\n<li>allowAny: add an option with a string field</li>\n</ul>"}, "inputEx.SelectField": {"name": "inputEx.SelectField", "constructors": [{"params": [{"type": "Object", "name": "options", "description": " Added options:\n<ul>\n<li>selectValues: contains the list of options values</li>\n<li>selectOptions: list of option element texts</li>\n<li>multiple: boolean to allow multiple selections</li>\n</ul>"}], "description": "Create a select field"}], "namespace": "", "module": "inputEx", "guessedname": "SelectField", "methods": {"setValue": {"params": [{"type": "String", "name": "value", "description": " The value to set"}, {"type": "boolean", "name": "[sendUpdatedEvt]", "description": " (optional) Wether this setValue should fire the updatedEvt or not (default is true, pass false to NOT send the event)"}], "description": "Set the value", "guessedname": "setValue", "guessedtype": "function"}, "addOption": {"params": [{"type": "Object", "name": "item", "description": ""}], "description": "Add an option in the selector", "guessedname": "addOption", "guessedtype": "function"}, "initEvents": {"description": "Register the \"change\" event", "guessedname": "initEvents", "guessedtype": "function"}, "renderComponent": {"description": "Build a select tag with options", "guessedname": "renderComponent", "guessedtype": "function"}, "getValue": {"return": {"type": "Any", "description": "the selected value from the selectValues array"}, "description": "Return the value", "guessedname": "getValue", "guessedtype": "function"}, "setOptions": {"params": [{"type": "Object", "name": "options", "description": " Options object (inputEx inputParams) as passed to the constructor"}], "description": "Set the default values of the options", "guessedname": "setOptions", "guessedtype": "function"}, "disable": {"description": "Disable the field", "guessedname": "disable", "guessedtype": "function"}, "enable": {"description": "Enable the field", "guessedname": "enable", "guessedtype": "function"}}, "extends": "inputEx.Field", "superclass": "inputEx.Field", "file": "SelectField.js", "guessedtype": "function", "shortname": "inputEx.SelectField", "description": "Create a select field"}, "inputEx.NumberField": {"name": "inputEx.NumberField", "constructors": [{"params": [{"type": "Object", "name": "options", "description": " inputEx.Field options object"}], "description": "A field limited to number inputs (floating)"}], "namespace": "", "module": "inputEx", "guessedname": "NumberField", "methods": {"validate": {"description": "Check if the entered number is a float", "guessedname": "validate", "guessedtype": "function"}, "getValue": {"return": {"type": "Number", "description": "The parsed float"}, "description": "Return a parsed float (javascript type number)", "guessedname": "getValue", "guessedtype": "function"}}, "extends": "inputEx.StringField", "superclass": "inputEx.StringField", "file": "NumberField.js", "guessedtype": "function", "shortname": "inputEx.NumberField", "description": "A field limited to number inputs (floating)"}, "inputEx.Group": {"name": "inputEx.Group", "constructors": [{"params": [{"type": "Object} options The following options are added for Groups and subclasses:\n<ul>\n<li>fields: Array of input fields declared like { label: 'Enter the value:' , type: 'text' or fieldClass: inputEx.Field, optional: true/false, inputParams: {inputparams object} ", "name": "</li>", "description": "\n<li>legend: The legend for the fieldset (default is an empty string)</li>\n<li>collapsible: Boolean to make the group collapsible (default is false)</li>\n<li>collapsed: If collapsible only, will be collapsed at creation (default is false)</li>\n<li>flatten:</li>\n</ul>"}], "description": "Handle a group of fields"}], "namespace": "", "module": "inputEx", "guessedname": "Group", "methods": {"onChange": {"params": [{"type": "String", "name": "eventName", "description": " Event name"}, {"type": "Array", "name": "args", "description": " Array of [fieldValue, fieldInstance]"}], "description": "Called when one of the group subfields is updated.", "guessedname": "onChange", "guessedtype": "function"}, "renderFields": {"description": "Render all the fields.\nWe use the parentEl so that inputEx.Form can append them to the FORM tag", "guessedname": "renderFields", "guessedtype": "function"}, "getFieldByName": {"params": [{"type": "String", "name": "fieldName", "description": " The name property"}], "description": "Return the sub-field instance by its name property", "guessedname": "getFieldByName", "guessedtype": "function"}, "render": {"description": "Render the group", "guessedname": "render", "guessedtype": "function"}, "initEvents": {"description": "Add a listener for the 'collapsible' option", "guessedname": "initEvents", "guessedtype": "function"}, "clear": {"params": [{"type": "boolean", "name": "[sendUpdatedEvt]", "description": " (optional) Wether this clear should fire the updatedEvt or not (default is true, pass false to NOT send the event)"}], "description": "Clear all subfields", "guessedname": "clear", "guessedtype": "function"}, "runInteractions": {"params": [{"type": "inputEx.Field", "name": "fieldInstance", "description": " Field that just changed"}, {"type": "Any", "name": "fieldValue", "description": " Field value"}], "description": "Run the interactions for the given field instance", "guessedname": "runInteractions", "guessedtype": "function"}, "runAction": {"params": [{"type": "Object", "name": "action", "description": " inputEx action object"}, {"type": "Any", "name": "triggerValue", "description": " The value that triggered the interaction"}], "description": "Run an action (for interactions)", "guessedname": "runAction", "guessedtype": "function"}, "focus": {"description": "Set the focus to the first input in the group", "guessedname": "focus", "guessedtype": "function"}, "disable": {"description": "Disable all fields in the group", "guessedname": "disable", "guessedtype": "function"}, "getValue": {"description": "Return an object with all the values of the fields", "guessedname": "getValue", "guessedtype": "function"}, "setOptions": {"params": [{"type": "Object", "name": "options", "description": " Options object (inputEx inputParams) as passed to the constructor"}], "description": "Adds some options: legend, collapsible, fields...", "guessedname": "setOptions", "guessedtype": "function"}, "enable": {"description": "Enable all fields in the group", "guessedname": "enable", "guessedtype": "function"}, "addInputExModules": {"params": [{"type": "YUILoader", "name": "yuiLoader", "description": " YUI Loader instance"}, {"type": "String", "name": "inputExPath", "description": " (optional) inputExPath"}], "description": "Add inputEx modules to a YUI loader", "guessedname": "addInputExModules", "guessedtype": "function"}, "close": {"description": "Close the group (recursively calls \"close\" on each field, does NOT hide the group )\nCall this function before hidding the group to close any field popup", "guessedname": "close", "guessedtype": "function"}, "validate": {"returns": "{Boolean} true if all fields validate and required fields are not empty", "description": "Validate each field", "guessedname": "validate", "guessedtype": "function"}, "renderField": {"params": [{"type": "Object", "name": "fieldOptions", "description": " The field properties as required bu inputEx.buildField"}], "description": "Instanciate one field given its parameters, type or fieldClass", "guessedname": "renderField", "guessedtype": "function"}, "setValue": {"params": [{"type": "Any", "name": "value", "description": " The group value"}, {"type": "boolean", "name": "[sendUpdatedEvt]", "description": " (optional) Wether this setValue should fire the updatedEvt or not (default is true, pass false to NOT send the event)"}], "description": "Set the values of each field from a key/value hash object", "guessedname": "setValue", "guessedtype": "function"}, "toggleCollapse": {"description": "Toggle the collapse state", "guessedname": "toggleCollapse", "guessedtype": "function"}}, "extends": "inputEx.Field", "superclass": "inputEx.Field", "file": "Group.js", "guessedtype": "function", "shortname": "inputEx.Group", "description": "Handle a group of fields"}, "inputEx.AutoComplete": {"name": "inputEx.AutoComplete", "constructors": [{"params": [{"type": "Object", "name": "options", "description": " Added options for Autocompleter\n<ul>\n<li>datasource: the datasource</li>\n<li>autoComp: autocompleter options</li>\n<li>returnValue: function to format the returned value (optional)</li>\n</ul>"}], "description": "An autocomplete field that wraps the YUI autocompleter"}], "namespace": "", "module": "inputEx", "guessedname": "AutoComplete", "methods": {"itemSelectHandler": {"params": [{"type": "", "name": "sType", "description": ""}, {"type": "", "name": "aArgs", "description": ""}], "description": "itemSelect handler", "guessedname": "itemSelectHandler", "guessedtype": "function"}, "setValue": {"params": [{"type": "Any", "name": "value", "description": " Value to set"}, {"type": "boolean", "name": "[sendUpdatedEvt]", "description": " (optional) Wether this setValue should fire the updatedEvt or not (default is true, pass false to NOT send the event)"}], "description": "Set the value", "guessedname": "setValue", "guessedtype": "function"}, "initEvents": {"description": "Custom event init\n<ul>\n<li>listen to autocompleter textboxBlurEvent instead of this.el \"blur\" event</li>\n<li>listener to autocompleter textboxBlurEvent added in buildAutocomplete method</li>\n</ul>", "guessedname": "initEvents", "guessedtype": "function"}, "renderComponent": {"description": "Render the hidden list element", "guessedname": "renderComponent", "guessedtype": "function"}, "getValue": {"description": "Return the hidden value (stored in a hidden input)", "guessedname": "getValue", "guessedtype": "function"}, "setOptions": {"params": [{"type": "Object", "name": "options", "description": " Options object (inputEx inputParams) as passed to the constructor"}], "description": "Adds autocomplete options", "guessedname": "setOptions", "guessedtype": "function"}, "onChange": {"params": [{"type": "Event", "name": "e", "description": " The original 'change' event"}], "description": "onChange event handler", "guessedname": "onChange", "guessedtype": "function"}, "buildAutocomplete": {"description": "Build the YUI autocompleter", "guessedname": "buildAutocomplete", "guessedtype": "function"}}, "extends": "inputEx.StringField", "superclass": "inputEx.StringField", "file": "AutoComplete.js", "guessedtype": "function", "shortname": "inputEx.AutoComplete", "description": "An autocomplete field that wraps the YUI autocompleter"}, "inputEx.DateSplitField": {"name": "inputEx.DateSplitField", "namespace": "", "module": "inputEx", "guessedname": "DateSplitField", "methods": {"setValue": {"params": [{"type": "Date", "name": "val", "description": " Date to set"}, {"type": "boolean", "name": "[sendUpdatedEvt]", "description": " (optional) Wether this setValue should fire the updatedEvt or not (default is true, pass false to NOT send the event)"}], "description": "Set the value. Format the date according to options.dateFormat", "guessedname": "setValue", "guessedtype": "function"}}, "extends": "inputEx.CombineField", "superclass": "inputEx.CombineField", "file": "DateSplitField.js", "guessedtype": "function", "shortname": "inputEx.DateSplitField", "description": "inputEx.DateSplitField"}, "inputEx.StringField": {"name": "inputEx.StringField", "constructors": [{"params": [{"type": "Object", "name": "options", "description": " Added options:\n<ul>\n<li>regexp: regular expression used to validate (otherwise it always validate)</li>\n<li>size: size attribute of the input</li>\n<li>maxLength: maximum size of the string field (no message display, uses the maxlength html attribute)</li>\n<li>minLength: minimum size of the string field (will display an error message if shorter)</li>\n<li>typeInvite: string displayed when the field is empty</li>\n<li>readonly: set the field as readonly</li>\n</ul>"}], "description": "Basic string field (equivalent to the input type \"text\")"}], "namespace": "", "module": "inputEx", "guessedname": "StringField", "methods": {"onFocus": {"description": "Clear the typeInvite when the field gains focus", "guessedname": "onFocus", "guessedtype": "function"}, "setValue": {"params": [{"type": "String", "name": "value", "description": " The new value"}, {"type": "boolean", "name": "[sendUpdatedEvt]", "description": " (optional) Wether this setValue should fire the updatedEvt or not (default is true, pass false to NOT send the event)"}], "description": "Function to set the value", "guessedname": "setValue", "guessedtype": "function"}, "initEvents": {"description": "Register the change, focus and blur events", "guessedname": "initEvents", "guessedtype": "function"}, "renderComponent": {"description": "Render an 'INPUT' DOM node", "guessedname": "renderComponent", "guessedtype": "function"}, "focus": {"description": "Set the focus to this field", "guessedname": "focus", "guessedtype": "function"}, "setClassFromState": {"description": "Display the type invite after setting the class", "guessedname": "setClassFromState", "guessedtype": "function"}, "getValue": {"params": [{"type": "String", "name": "The", "description": " string value"}], "description": "Return the string value", "guessedname": "getValue", "guessedtype": "function"}, "setOptions": {"params": [{"type": "Object", "name": "options", "description": " Options object (inputEx inputParams) as passed to the constructor"}], "description": "Set the default values of the options", "guessedname": "setOptions", "guessedtype": "function"}, "disable": {"description": "Disable the field", "guessedname": "disable", "guessedtype": "function"}, "enable": {"description": "Enable the field", "guessedname": "enable", "guessedtype": "function"}, "validate": {"description": "Uses the optional regexp to validate the field value", "guessedname": "validate", "guessedtype": "function"}, "getStateString": {"description": "Add the minLength string message handling", "guessedname": "getStateString", "guessedtype": "function"}}, "extends": "inputEx.Field", "superclass": "inputEx.Field", "file": "StringField.js", "guessedtype": "function", "shortname": "inputEx.StringField", "description": "Basic string field (equivalent to the input type \"text\")"}, "inputEx.DateField": {"name": "inputEx.DateField", "constructors": [{"params": [{"type": "Object", "name": "options", "description": " Add the folowing options: \n<ul>\n<li>dateFormat: default to 'm/d/Y'</li>\n</ul>"}], "description": "A Date Field."}], "namespace": "", "module": "inputEx", "guessedname": "DateField", "methods": {"setOptions": {"params": [{"type": "Object", "name": "options", "description": " Options object (inputEx inputParams) as passed to the constructor"}], "description": "Adds the 'inputEx-DateField' default className", "guessedname": "setOptions", "guessedtype": "function"}, "validate": {"description": "Specific Date validation depending of the 'format' option", "guessedname": "validate", "guessedtype": "function"}, "setValue": {"params": [{"type": "Date", "name": "val", "description": " Date to set"}, {"type": "boolean", "name": "[sendUpdatedEvt]", "description": " (optional) Wether this setValue should fire the updatedEvt or not (default is true, pass false to NOT send the event)"}], "description": "Format the date according to options.dateFormat", "guessedname": "setValue", "guessedtype": "function"}, "getValue": {"return": {"type": "Date", "description": "The javascript Date object"}, "description": "Return value in DATETIME format (use getFormattedValue() to have 04/10/2002-like format)", "guessedname": "getValue", "guessedtype": "function"}}, "extends": "inputEx.StringField", "superclass": "inputEx.StringField", "file": "DateField.js", "guessedtype": "function", "shortname": "inputEx.DateField", "description": "A Date Field."}, "inputEx.Form": {"name": "inputEx.Form", "constructors": [{"params": [{"type": "Object} options The following options are added for Forms:\n<ul>\n<li>buttons: list of button definition objects {value: 'Click Me', type: 'submit'}</li>\n<li>ajax: send the form through an ajax request (submit button should be present): {method: 'POST', uri: 'myScript.php', callback: same as YAHOO.util.Connect.asyncRequest callback", "name": "</li>", "description": "\n<li>showMask: adds a mask over the form while the request is running (default is false)</li>\n</ul>"}], "description": "Create a group of fields within a FORM tag and adds buttons"}], "namespace": "", "module": "inputEx", "guessedname": "Form", "methods": {"hideMask": {"description": "Hide the form mask", "guessedname": "hideMask", "guessedtype": "function"}, "renderMask": {"description": "Create a Mask over the form", "guessedname": "renderMask", "guessedtype": "function"}, "onSubmit": {"params": [{"type": "Event", "name": "e", "description": " The original onSubmit event"}], "description": "Intercept the 'onsubmit' event and stop it if !validate\nIf the ajax option object is set, use YUI async Request to send the form", "guessedname": "onSubmit", "guessedtype": "function"}, "render": {"description": "Render the group", "guessedname": "render", "guessedtype": "function"}, "initEvents": {"description": "Init the events", "guessedname": "initEvents", "guessedtype": "function"}, "enable": {"description": "Enable all fields and buttons in the form", "guessedname": "enable", "guessedtype": "function"}, "disable": {"description": "Disable all fields and buttons in the form", "guessedname": "disable", "guessedtype": "function"}, "setOptions": {"params": [{"type": "Object", "name": "options", "description": " Options object (inputEx inputParams) as passed to the constructor"}], "description": "Adds buttons and set ajax default parameters", "guessedname": "setOptions", "guessedtype": "function"}, "asyncRequest": {"description": "Send the form value in JSON through an ajax request", "guessedname": "asyncRequest", "guessedtype": "function"}, "renderButtons": {"description": "Render the buttons", "guessedname": "renderButtons", "guessedtype": "function"}, "showMask": {"description": "Show the form mask", "guessedname": "showMask", "guessedtype": "function"}}, "extends": "inputEx.Group", "superclass": "inputEx.Group", "file": "Form.js", "guessedtype": "function", "shortname": "inputEx.Form", "description": "Create a group of fields within a FORM tag and adds buttons"}, "inputEx.HiddenField": {"name": "inputEx.HiddenField", "constructors": [{"params": [{"type": "Object", "name": "options", "description": " inputEx.Field options object"}], "description": "Create a hidden input, inherits from inputEx.Field"}], "namespace": "", "module": "inputEx", "guessedname": "HiddenField", "methods": {"setValue": {"params": [{"type": "Any", "name": "val", "description": " The value to set"}, {"type": "boolean", "name": "[sendUpdatedEvt]", "description": " (optional) Wether this setValue should fire the updatedEvt or not (default is true, pass false to NOT send the event)"}], "description": "Stores the value in a local variable", "guessedname": "setValue", "guessedtype": "function"}, "render": {"description": "Doesn't render much...", "guessedname": "render", "guessedtype": "function"}, "getValue": {"return": {"type": "Any", "description": "the previously stored value"}, "description": "Get the previously stored value", "guessedname": "getValue", "guessedtype": "function"}}, "extends": "inputEx.Field", "superclass": "inputEx.Field", "file": "HiddenField.js", "guessedtype": "function", "shortname": "inputEx.HiddenField", "description": "Create a hidden input, inherits from inputEx.Field"}, "inputEx": {"return": "{inputEx.Field} Created field instance", "name": "inputEx", "namespace": "", "module": "inputEx", "guessedname": "inputEx", "methods": {"compactArray": {"return": {"type": "Array", "description": "The new array"}, "description": "Create a new array without the null or undefined values", "static": "", "guessedname": "compactArray", "guessedtype": "function", "params": [{"type": "Array", "name": "arr", "description": " The array to compact"}]}, "cn": {"return": {"type": "HTMLElement", "description": "The created node"}, "description": "Helper function to create a DOM node. (wrapps the document.createElement tag and the inputEx.sn functions)", "static": "", "guessedname": "cn", "guessedtype": "function", "params": [{"type": "String", "name": "tag", "description": " The tagName to create (ex: 'div', 'a', ...)"}, {"type": "Object", "name": "[domAttributes]", "description": " see inputEx.sn"}, {"type": "Object", "name": "[styleAttributes]", "description": " see inputEx.sn"}, {"type": "String", "name": "[innerHTML]", "description": " The html string to append into the created element"}]}, "registerType": {"static": "", "description": "When you create a new inputEx Field Class, you can register it to give it a simple type.\nex:   inputEx.registerType(\"color\", inputEx.ColorField);", "guessedname": "registerType", "guessedtype": "function"}, "indexOf": {"return": {"type": "number", "description": "Element position, -1 if not found"}, "description": "Find the position of the given element. (This method is not available in IE 6)", "static": "", "guessedname": "indexOf", "guessedtype": "function", "params": [{"type": "Object", "name": "el", "description": " Value to search"}, {"type": "Array", "name": "arr", "description": " The array to search"}]}, "getType": {"return": {"type": "String", "description": "returns the inputEx type string or <code>null</code>"}, "description": "Get the inputex type for the given class (ex: <code>inputEx.getType(inputEx.ColorField)</code> returns \"color\")", "static": "", "guessedname": "getType", "guessedtype": "function", "params": [{"type": "inputEx.Field", "name": "FieldClass", "description": " An inputEx.Field or derivated class"}]}, "buildField": {"return": {"type": "inputEx.Field", "description": "Created field instance"}, "description": "Kept for backward compatibility", "alias": "inputEx", "params": [{"type": "Object", "name": "fieldOptions", "description": ""}], "guessedname": "buildField", "guessedtype": "function"}, "sn": {"static": "", "params": [{"type": "HTMLElement", "name": "el", "description": " The element to set attributes to"}, {"type": "Object} domAttributes An object containing key/value pairs to set as node attributes (ex: {id: 'myElement', className: 'myCssClass', ...", "name": ")", "description": ""}, {"type": "Object", "name": "styleAttributes", "description": " Same thing for style attributes. Please use camelCase for style attributes (ex: backgroundColor for 'background-color')"}], "description": "Helper function to set DOM node attributes and style attributes.", "guessedname": "sn", "guessedtype": "function"}, "getFieldClass": {"static": "", "params": [{"type": "String", "name": "type", "description": " String type of the field"}], "description": "Returns the class for the given type\nex: inputEx.getFieldClass(\"color\") returns inputEx.ColorField", "guessedname": "getFieldClass", "guessedtype": "function"}}, "static": "", "param": "{Object} fieldOptions", "file": "inputex.js", "guessedtype": "function", "shortname": "inputEx", "properties": {"stateEmpty": {"type": "String", "description": "Field empty state constant", "guessedname": "stateEmpty", "guessedtype": "property"}, "stateValid": {"type": "String", "description": "Field valid state constant", "guessedname": "stateValid", "guessedtype": "property"}, "widget": {"static": "", "description": "inputEx widget namespace", "guessedname": "widget", "guessedtype": "property"}, "typeClasses": {"description": "Hash between inputEx types and classes (ex: <code>inputEx.typeClasses.color = inputEx.ColorField</code>)<br />\nPlease register the types with the <code>registerType</code> method", "guessedname": "typeClasses", "guessedtype": "property"}, "regexps": {"description": "Associative array containing common regular expressions", "guessedname": "regexps", "guessedtype": "property"}, "messages": {"description": "Associative array containing field messages", "guessedname": "messages", "guessedtype": "property"}, "stateRequired": {"type": "String", "description": "Field required state constant", "guessedname": "stateRequired", "guessedtype": "property"}, "stateInvalid": {"type": "String", "description": "Field invalid state constant", "guessedname": "stateInvalid", "guessedtype": "property"}, "spacerUrl": {"type": "String", "description": "Url to the spacer image. This url schould be changed according to your project directories", "guessedname": "spacerUrl", "guessedtype": "property"}}, "description": "Build a field from an object like: { type: 'color' or fieldClass: inputEx.ColorField, inputParams: {} }<br />\nThe inputParams property is the object that will be passed as the <code>options</code> parameter to the field class constructor.<br />\nIf the neither type or fieldClass are found, it uses inputEx.StringField"}, "inputEx.widget.DDList": {"name": "inputEx.widget.DDList", "constructors": [{"params": [{"type": "Object", "name": "options", "description": " Options:\n<ul>\n<li>id: id of the ul element</li>\n<li>value: initial value of the list</li>\n</ul>"}], "description": "Create a sortable list"}], "namespace": "", "module": "inputEx", "guessedname": "DDList", "methods": {"setValue": {"params": [{"type": "Array", "name": "value", "description": " list of values"}], "description": "Set the value of the list", "guessedname": "setValue", "guessedtype": "function"}, "updateItem": {"params": [{"type": "Integer", "name": "index", "description": " Item index"}, {"type": "Any", "name": "value", "description": " New value"}], "description": "Update the value of a given item", "guessedname": "updateItem", "guessedtype": "function"}, "addItem": {"description": "Add an item to the list", "guessedname": "addItem", "guessedtype": "function"}, "getValue": {"return": {"type": "Array", "description": "array of values"}, "description": "Return the current value of the field", "guessedname": "getValue", "guessedtype": "function"}, "removeItem": {"params": [{"type": "Integer", "name": "index", "description": " Item index"}], "description": "Method to remove an item (_removeItem function + event firing)", "guessedname": "removeItem", "guessedtype": "function"}, "_removeItem": {"private": "", "description": "private method to remove an item", "guessedname": "_removeItem", "guessedtype": "function"}}, "file": "ddlist.js", "guessedtype": "function", "shortname": "inputEx.widget.DDList", "events": {"YAHOO custom event fired when an item is removed": {"params": [{"type": "Any", "name": "itemValue", "description": " value of the removed item"}], "guessedname": "itemRemovedEvt", "guessedtype": "property"}, "YAHOO custom event fired when the list is reordered": {"guessedname": "listReorderedEvt", "guessedtype": "property"}}, "description": "Create a sortable list"}, "inputEx.DSSelectField": {"name": "inputEx.DSSelectField", "constructors": [{"params": [{"type": "Object", "name": "options", "description": " Added options:\n<ul>\n<li>selectValues: contains the list of options values</li>\n<li>selectOptions: list of option element texts</li>\n<li>multiple: boolean to allow multiple selections</li>\n<li>datasource: the datasource</li>\n<li>valueKey: value key</li>\n<li>labelKey: label key</li>\n</ul>"}], "description": "Create a select field from a datasource"}], "namespace": "", "module": "inputEx", "guessedname": "DSSelectField", "methods": {"populateSelect": {"description": "Insert the options", "guessedname": "populateSelect", "guessedtype": "function"}, "renderComponent": {"description": "Build a select tag with options", "guessedname": "renderComponent", "guessedtype": "function"}, "setOptions": {"params": [{"type": "Object", "name": "options", "description": " Options object (inputEx inputParams) as passed to the constructor"}], "description": "Setup the additional options for selectfield", "guessedname": "setOptions", "guessedtype": "function"}, "onDatasourceSuccess": {"description": "Callback for request success", "guessedname": "onDatasourceSuccess", "guessedtype": "function"}, "onDatasourceFailure": {"description": "Callback for request failure", "guessedname": "onDatasourceFailure", "guessedtype": "function"}, "sendDataRequest": {"description": "Send the datasource request", "guessedname": "sendDataRequest", "guessedtype": "function"}}, "extends": "inputEx.SelectField", "superclass": "inputEx.SelectField", "file": "DSSelectField.js", "guessedtype": "function", "shortname": "inputEx.DSSelectField", "description": "Create a select field from a datasource"}, "inputEx.visus": {"name": "inputEx.visus", "namespace": "", "module": "inputEx", "guessedname": "visus", "methods": {"trimpath": {"description": "Use the trimpath-template engine\nsee http://code.google.com/p/trimpath/wiki/JavaScriptTemplates for syntax\noptions = {visuType: 'trimpath', template: \"String template\"}", "guessedname": "trimpath", "guessedtype": "function"}, "dump": {"description": "Use YAHOO.lang.dump\noptions = {visuType: 'dump'}", "guessedname": "dump", "guessedtype": "function"}, "func": {"description": "Use a rendering function\noptions = {visuType: 'func', func: function(data) { ...code here...} }"}, "renderVisu": {"return": {"type": "HTMLElement || String", "description": "Either the inserted HTMLElement or the String set to parentEl.innerHTML"}, "description": "Render 'data' using a visualization function described by 'visuOptions'", "static": "", "guessedname": "renderVisu", "guessedtype": "function", "params": [{"type": "Object", "name": "visuOptions", "description": " The visu parameters object with: visuType: 'myType', ...args..."}, {"type": "Object", "name": "data", "description": " The input data to send to the template"}, {"type": "HTMLElement || String", "name": "parentEl", "description": " optional Set the result as content of parentEl"}]}}, "static": "", "file": "Visus.js", "guessedtype": "property", "shortname": "inputEx.visus", "description": "Contains the various visualization methods"}, "inputEx.UpperCaseField": {"name": "inputEx.UpperCaseField", "constructors": [{"params": [{"type": "Object", "name": "options", "description": " inputEx.Field options object"}], "description": "A field where the value is always uppercase"}], "namespace": "", "module": "inputEx", "guessedname": "UpperCaseField", "methods": {"setValue": {"params": [{"type": "String", "name": "val", "description": " The string"}, {"type": "boolean", "name": "[sendUpdatedEvt]", "description": " (optional) Wether this setValue should fire the updatedEvt or not (default is true, pass false to NOT send the event)"}], "description": "Set the value and call toUpperCase", "guessedname": "setValue", "guessedtype": "function"}, "onKeyPress": {"params": [{"type": "Event", "name": "e", "description": " The original 'input' event"}], "description": "Call setvalue on input to update the field with upper case value", "guessedname": "onKeyPress", "guessedtype": "function"}}, "extends": "inputEx.StringField", "superclass": "inputEx.StringField", "file": "UpperCaseField.js", "guessedtype": "function", "shortname": "inputEx.UpperCaseField", "description": "A field where the value is always uppercase"}, "InputExCellEditor": {"name": "InputExCellEditor", "constructors": [{"params": [{"type": "Object", "name": "inputExFieldDef", "description": " InputEx field definition object"}], "description": "The InputExCellEditor class provides functionality for inline editing\nusing the inputEx field definition."}], "namespace": "", "module": "inputEx", "guessedname": "InputExCellEditor", "methods": {"renderForm": {"description": "Render the inputEx field editor", "guessedname": "renderForm", "guessedtype": "function"}, "getInputValue": {"description": "Returns new value for InputExCellEditor.", "guessedname": "getInputValue", "guessedtype": "function"}, "focus": {"description": "Sets focus in InputExCellEditor.", "guessedname": "focus", "guessedtype": "function"}, "resetForm": {"description": "Resets InputExCellEditor UI to initial state.", "guessedname": "resetForm", "guessedtype": "function"}, "show": {"description": "Hack to NOT close the field at the first updatedEvt (fired when we set the value)", "guessedname": "show", "guessedtype": "function"}}, "extends": "YAHOO.widget.BaseCellEditor", "superclass": "YAHOO.widget.BaseCellEditor", "file": "DataTable-beta.js", "guessedtype": "function", "shortname": "InputExCellEditor", "description": "The InputExCellEditor class provides functionality for inline editing\nusing the inputEx field definition."}, "inputEx.widget.Dialog": {"name": "inputEx.widget.Dialog", "constructors": [{"params": [{"type": "Object} options Config object, options are :\n<ul>\n<li>inputExDef: an inputEx type definition (ex: {type: 'form', inputParams: {fields: [...]}", "name": ")</li>", "description": "\n<li>id: an optional id for the dialog</li>\n<li>parentEl: optional parentEl (default document.body)</li>\n<li>title: the dialog title</li>\n<li>panelConfig: the YAHOO.widget.Panel userConfig object</li>\n</ul>"}], "description": "Create a Dialog from an inputEx field definition"}], "namespace": "", "module": "inputEx", "guessedname": "Dialog", "methods": {"getForm": {"return": {"type": "inputEx.Field", "description": "the field instance"}, "description": "Return the inputEx field instance created", "guessedname": "getForm", "guessedtype": "function"}, "buildForm": {"description": "render the inputExDef as a inputEx field", "guessedname": "buildForm", "guessedtype": "function"}, "setValue": {"params": [{"type": "Any", "name": "value", "description": " The value to set on the field"}, {"type": "boolean", "name": "[sendUpdatedEvt]", "description": " (optional) Wether this setValue should fire the updatedEvt or not (default is true, pass false to NOT send the event)"}], "description": "Shortcut to set value", "guessedname": "setValue", "guessedtype": "function"}, "getValue": {"return": {"type": "Any", "description": "the field value"}, "description": "Shortcut to get value", "guessedname": "getValue", "guessedtype": "function"}}, "file": "Dialog-beta.js", "guessedtype": "function", "shortname": "inputEx.widget.Dialog", "description": "Create a Dialog from an inputEx field definition"}}, "version": "0.2.3a", "modules": {"inputEx": {"description": "The inputEx Library", "submodules": [], "classlist": ["inputEx.Field", "inputEx.Form", "inputEx.Group", "inputEx", "inputEx.JsonSchema", "inputEx.JsonSchema.Builder", "inputEx.visus", "inputEx.ColorField2", "inputEx.ImagemapField", "inputEx.AutoComplete", "inputEx.BirthdateField", "inputEx.CheckBox", "inputEx.ColorField", "inputEx.CombineField", "inputEx.DateField", "inputEx.DatePickerField", "inputEx.DateSplitField", "inputEx.DateTimeField", "inputEx.DSSelectField", "inputEx.EmailField", "inputEx.FileField", "inputEx.HiddenField", "inputEx.InPlaceEdit", "inputEx.IntegerField", "inputEx.IPv4Field", "inputEx.Lens", "inputEx.ListField", "inputEx.MapField", "inputEx.MenuField", "inputEx.MultiAutoComplete", "inputEx.MultiSelectField", "inputEx.NumberField", "inputEx.PairField", "inputEx.PasswordField", "inputEx.RadioButton", "inputEx.RadioField", "inputEx.RTEField", "inputEx.SelectField", "inputEx.SliderField", "inputEx.StringField", "inputEx.Textarea", "inputEx.TimeField", "inputEx.TimeIntervalField", "inputEx.TreeField", "inputEx.TypeField", "inputEx.UneditableField", "inputEx.UpperCaseField", "inputEx.UrlField", "inputEx.VectorField", "inputEx.widget.DataTable", "InputExCellEditor", "inputEx.widget.DDListItem", "inputEx.widget.DDList", "inputEx.widget.Dialog", "inputEx.widget.FastTable", "inputEx.widget.JsonTreeInspector"], "filelist": ["Field.js", "Form.js", "Group.js", "inputex-loader.js", "inputex.js", "json-schema.js", "Visus.js", "ColorField2.js", "ImagemapField.js", "AutoComplete.js", "BirthdateField.js", "CheckBox.js", "ColorField.js", "CombineField.js", "DateField.js", "DatePickerField.js", "DateSplitField.js", "DateTimeField.js", "DSSelectField.js", "EmailField.js", "FileField-beta.js", "HiddenField.js", "InPlaceEdit.js", "IntegerField.js", "IPv4Field.js", "Lens-beta.js", "ListField.js", "MapField.js", "MenuField.js", "MultiAutoComplete.js", "MultiSelectField.js", "NumberField.js", "PairField.js", "PasswordField.js", "RadioButton.js", "RadioField.js", "RTEField.js", "SelectField.js", "SliderField.js", "StringField.js", "Textarea.js", "TimeField.js", "TimeIntervalField.js", "TreeField.js", "TypeField.js", "UneditableField.js", "UpperCaseField.js", "UrlField.js", "VectorField.js", "fr.js", "it.js", "inputex-rpc.js", "DataTable-beta.js", "ddlist.js", "Dialog-beta.js", "FastTable-beta.js", "json-tree-inspector.js"], "subdata": {}, "name": "inputEx"}}, "filemap": {"IntegerField.js": {"classlist": ["inputEx.IntegerField"], "name": "IntegerField.js", "module": "inputEx"}, "TimeField.js": {"classlist": ["inputEx.TimeField"], "name": "TimeField.js", "module": "inputEx"}, "Textarea.js": {"classlist": ["inputEx.Textarea"], "name": "Textarea.js", "module": "inputEx"}, "MapField.js": {"classlist": ["inputEx.MapField"], "name": "MapField.js", "module": "inputEx"}, "MultiAutoComplete.js": {"classlist": ["inputEx.MultiAutoComplete"], "name": "MultiAutoComplete.js", "module": "inputEx"}, "TimeIntervalField.js": {"classlist": ["inputEx.TimeIntervalField"], "name": "TimeIntervalField.js", "module": "inputEx"}, "AutoComplete.js": {"classlist": ["inputEx.AutoComplete"], "name": "AutoComplete.js", "module": "inputEx"}, "SelectField.js": {"classlist": ["inputEx.SelectField"], "name": "SelectField.js", "module": "inputEx"}, "MenuField.js": {"classlist": ["inputEx.MenuField"], "name": "MenuField.js", "module": "inputEx"}, "ListField.js": {"classlist": ["inputEx.ListField"], "name": "ListField.js", "module": "inputEx"}, "fr.js": {"classlist": [], "name": "fr.js", "module": "inputEx"}, "FastTable-beta.js": {"classlist": ["inputEx.widget.FastTable"], "name": "FastTable-beta.js", "module": "inputEx"}, "UpperCaseField.js": {"classlist": ["inputEx.UpperCaseField"], "name": "UpperCaseField.js", "module": "inputEx"}, "it.js": {"classlist": [], "name": "it.js", "module": "inputEx"}, "BirthdateField.js": {"classlist": ["inputEx.BirthdateField"], "name": "BirthdateField.js", "module": "inputEx"}, "json-schema.js": {"classlist": ["inputEx.JsonSchema", "inputEx.JsonSchema.Builder"], "name": "json-schema.js", "module": "inputEx"}, "DateField.js": {"classlist": ["inputEx.DateField"], "name": "DateField.js", "module": "inputEx"}, "ColorField2.js": {"classlist": ["inputEx.ColorField2"], "name": "ColorField2.js", "module": "inputEx"}, "inputex.js": {"classlist": ["inputEx"], "name": "inputex.js", "module": "inputEx"}, "NumberField.js": {"classlist": ["inputEx.NumberField"], "name": "NumberField.js", "module": "inputEx"}, "VectorField.js": {"classlist": ["inputEx.VectorField"], "name": "VectorField.js", "module": "inputEx"}, "RadioButton.js": {"classlist": ["inputEx.RadioButton"], "name": "RadioButton.js", "module": "inputEx"}, "ColorField.js": {"classlist": ["inputEx.ColorField"], "name": "ColorField.js", "module": "inputEx"}, "PasswordField.js": {"classlist": ["inputEx.PasswordField"], "name": "PasswordField.js", "module": "inputEx"}, "Dialog-beta.js": {"classlist": ["inputEx.widget.Dialog"], "name": "Dialog-beta.js", "module": "inputEx"}, "StringField.js": {"classlist": ["inputEx.StringField"], "name": "StringField.js", "module": "inputEx"}, "ddlist.js": {"classlist": ["inputEx.widget.DDListItem", "inputEx.widget.DDList"], "name": "ddlist.js", "module": "inputEx"}, "RTEField.js": {"classlist": ["inputEx.RTEField"], "name": "RTEField.js", "module": "inputEx"}, "DSSelectField.js": {"classlist": ["inputEx.DSSelectField"], "name": "DSSelectField.js", "module": "inputEx"}, "Lens-beta.js": {"classlist": ["inputEx.Lens"], "name": "Lens-beta.js", "module": "inputEx"}, "DatePickerField.js": {"classlist": ["inputEx.DatePickerField"], "name": "DatePickerField.js", "module": "inputEx"}, "HiddenField.js": {"classlist": ["inputEx.HiddenField"], "name": "HiddenField.js", "module": "inputEx"}, "TreeField.js": {"classlist": ["inputEx.TreeField"], "name": "TreeField.js", "module": "inputEx"}, "UrlField.js": {"classlist": ["inputEx.UrlField"], "name": "UrlField.js", "module": "inputEx"}, "CombineField.js": {"classlist": ["inputEx.CombineField"], "name": "CombineField.js", "module": "inputEx"}, "SliderField.js": {"classlist": ["inputEx.SliderField"], "name": "SliderField.js", "module": "inputEx"}, "DateSplitField.js": {"classlist": ["inputEx.DateSplitField"], "name": "DateSplitField.js", "module": "inputEx"}, "inputex-rpc.js": {"classlist": [], "name": "inputex-rpc.js", "module": "inputEx"}, "InPlaceEdit.js": {"classlist": ["inputEx.InPlaceEdit"], "name": "InPlaceEdit.js", "module": "inputEx"}, "inputex-loader.js": {"classlist": [], "name": "inputex-loader.js", "module": "inputEx"}, "MultiSelectField.js": {"classlist": ["inputEx.MultiSelectField"], "name": "MultiSelectField.js", "module": "inputEx"}, "DateTimeField.js": {"classlist": ["inputEx.DateTimeField"], "name": "DateTimeField.js", "module": "inputEx"}, "Form.js": {"classlist": ["inputEx.Form"], "name": "Form.js", "module": "inputEx"}, "Visus.js": {"classlist": ["inputEx.visus"], "name": "Visus.js", "module": "inputEx"}, "json-tree-inspector.js": {"classlist": ["inputEx.widget.JsonTreeInspector"], "name": "json-tree-inspector.js", "module": "inputEx"}, "PairField.js": {"classlist": ["inputEx.PairField"], "name": "PairField.js", "module": "inputEx"}, "CheckBox.js": {"classlist": ["inputEx.CheckBox"], "name": "CheckBox.js", "module": "inputEx"}, "Field.js": {"classlist": ["inputEx.Field"], "name": "Field.js", "module": "inputEx"}, "EmailField.js": {"classlist": ["inputEx.EmailField"], "name": "EmailField.js", "module": "inputEx"}, "TypeField.js": {"classlist": ["inputEx.TypeField"], "name": "TypeField.js", "module": "inputEx"}, "ImagemapField.js": {"classlist": ["inputEx.ImagemapField"], "name": "ImagemapField.js", "module": "inputEx"}, "IPv4Field.js": {"classlist": ["inputEx.IPv4Field"], "name": "IPv4Field.js", "module": "inputEx"}, "RadioField.js": {"classlist": ["inputEx.RadioField"], "name": "RadioField.js", "module": "inputEx"}, "FileField-beta.js": {"classlist": ["inputEx.FileField"], "name": "FileField-beta.js", "module": "inputEx"}, "DataTable-beta.js": {"classlist": ["inputEx.widget.DataTable", "InputExCellEditor"], "name": "DataTable-beta.js", "module": "inputEx"}, "Group.js": {"classlist": ["inputEx.Group"], "name": "Group.js", "module": "inputEx"}, "UneditableField.js": {"classlist": ["inputEx.UneditableField"], "name": "UneditableField.js", "module": "inputEx"}}}